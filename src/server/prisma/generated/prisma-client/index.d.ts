// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  investment: (where?: InvestmentWhereInput) => Promise<boolean>;
  property: (where?: PropertyWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  investment: (where: InvestmentWhereUniqueInput) => InvestmentNullablePromise;
  investments: (args?: {
    where?: InvestmentWhereInput;
    orderBy?: InvestmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Investment>;
  investmentsConnection: (args?: {
    where?: InvestmentWhereInput;
    orderBy?: InvestmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InvestmentConnectionPromise;
  property: (where: PropertyWhereUniqueInput) => PropertyNullablePromise;
  properties: (args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Property>;
  propertiesConnection: (args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PropertyConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createInvestment: (data: InvestmentCreateInput) => InvestmentPromise;
  updateInvestment: (args: {
    data: InvestmentUpdateInput;
    where: InvestmentWhereUniqueInput;
  }) => InvestmentPromise;
  updateManyInvestments: (args: {
    data: InvestmentUpdateManyMutationInput;
    where?: InvestmentWhereInput;
  }) => BatchPayloadPromise;
  upsertInvestment: (args: {
    where: InvestmentWhereUniqueInput;
    create: InvestmentCreateInput;
    update: InvestmentUpdateInput;
  }) => InvestmentPromise;
  deleteInvestment: (where: InvestmentWhereUniqueInput) => InvestmentPromise;
  deleteManyInvestments: (where?: InvestmentWhereInput) => BatchPayloadPromise;
  createProperty: (data: PropertyCreateInput) => PropertyPromise;
  updateProperty: (args: {
    data: PropertyUpdateInput;
    where: PropertyWhereUniqueInput;
  }) => PropertyPromise;
  updateManyProperties: (args: {
    data: PropertyUpdateManyMutationInput;
    where?: PropertyWhereInput;
  }) => BatchPayloadPromise;
  upsertProperty: (args: {
    where: PropertyWhereUniqueInput;
    create: PropertyCreateInput;
    update: PropertyUpdateInput;
  }) => PropertyPromise;
  deleteProperty: (where: PropertyWhereUniqueInput) => PropertyPromise;
  deleteManyProperties: (where?: PropertyWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  investment: (
    where?: InvestmentSubscriptionWhereInput
  ) => InvestmentSubscriptionPayloadSubscription;
  property: (
    where?: PropertySubscriptionWhereInput
  ) => PropertySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PropertyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "address_ASC"
  | "address_DESC"
  | "advantages_ASC"
  | "advantages_DESC"
  | "area_ASC"
  | "area_DESC"
  | "bathroomsCount_ASC"
  | "bathroomsCount_DESC"
  | "bedroomsCount_ASC"
  | "bedroomsCount_DESC"
  | "city_ASC"
  | "city_DESC"
  | "disadvantages_ASC"
  | "disadvantages_DESC"
  | "floor_ASC"
  | "floor_DESC"
  | "parking_ASC"
  | "parking_DESC"
  | "surface_ASC"
  | "surface_DESC"
  | "zipCode_ASC"
  | "zipCode_DESC";

export type InvestmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "advantages_ASC"
  | "advantages_DESC"
  | "condominiumFees_ASC"
  | "condominiumFees_DESC"
  | "csgTax_ASC"
  | "csgTax_DESC"
  | "description_ASC"
  | "description_DESC"
  | "disadvantages_ASC"
  | "disadvantages_DESC"
  | "homeownerInsurance_ASC"
  | "homeownerInsurance_DESC"
  | "loanAmount_ASC"
  | "loanAmount_DESC"
  | "loanInsuranceRate_ASC"
  | "loanInsuranceRate_DESC"
  | "loanLender_ASC"
  | "loanLender_DESC"
  | "loanMensualRepaymentAmount_ASC"
  | "loanMensualRepaymentAmount_DESC"
  | "loanMonthsOfdeferredReimbursement_ASC"
  | "loanMonthsOfdeferredReimbursement_DESC"
  | "loanRate_ASC"
  | "loanRate_DESC"
  | "monthlyGain_ASC"
  | "monthlyGain_DESC"
  | "name_ASC"
  | "name_DESC"
  | "notaryFees_ASC"
  | "notaryFees_DESC"
  | "numberOfMonths_ASC"
  | "numberOfMonths_DESC"
  | "paybackperiod_ASC"
  | "paybackperiod_DESC"
  | "personalContribution_ASC"
  | "personalContribution_DESC"
  | "personnalContribution_ASC"
  | "personnalContribution_DESC"
  | "propertyTax_ASC"
  | "propertyTax_DESC"
  | "realEstatePrice_ASC"
  | "realEstatePrice_DESC"
  | "renovationsPrice_ASC"
  | "renovationsPrice_DESC"
  | "taxes_ASC"
  | "taxes_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpsertWithoutPropertiesInput {
  update: UserUpdateWithoutPropertiesDataInput;
  create: UserCreateWithoutPropertiesInput;
}

export type InvestmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PropertyCreateOneWithoutInvestmentsInput {
  create?: Maybe<PropertyCreateWithoutInvestmentsInput>;
  connect?: Maybe<PropertyWhereUniqueInput>;
}

export interface InvestmentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  advantages?: Maybe<String>;
  advantages_not?: Maybe<String>;
  advantages_in?: Maybe<String[] | String>;
  advantages_not_in?: Maybe<String[] | String>;
  advantages_lt?: Maybe<String>;
  advantages_lte?: Maybe<String>;
  advantages_gt?: Maybe<String>;
  advantages_gte?: Maybe<String>;
  advantages_contains?: Maybe<String>;
  advantages_not_contains?: Maybe<String>;
  advantages_starts_with?: Maybe<String>;
  advantages_not_starts_with?: Maybe<String>;
  advantages_ends_with?: Maybe<String>;
  advantages_not_ends_with?: Maybe<String>;
  condominiumFees?: Maybe<Float>;
  condominiumFees_not?: Maybe<Float>;
  condominiumFees_in?: Maybe<Float[] | Float>;
  condominiumFees_not_in?: Maybe<Float[] | Float>;
  condominiumFees_lt?: Maybe<Float>;
  condominiumFees_lte?: Maybe<Float>;
  condominiumFees_gt?: Maybe<Float>;
  condominiumFees_gte?: Maybe<Float>;
  csgTax?: Maybe<Float>;
  csgTax_not?: Maybe<Float>;
  csgTax_in?: Maybe<Float[] | Float>;
  csgTax_not_in?: Maybe<Float[] | Float>;
  csgTax_lt?: Maybe<Float>;
  csgTax_lte?: Maybe<Float>;
  csgTax_gt?: Maybe<Float>;
  csgTax_gte?: Maybe<Float>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  disadvantages?: Maybe<String>;
  disadvantages_not?: Maybe<String>;
  disadvantages_in?: Maybe<String[] | String>;
  disadvantages_not_in?: Maybe<String[] | String>;
  disadvantages_lt?: Maybe<String>;
  disadvantages_lte?: Maybe<String>;
  disadvantages_gt?: Maybe<String>;
  disadvantages_gte?: Maybe<String>;
  disadvantages_contains?: Maybe<String>;
  disadvantages_not_contains?: Maybe<String>;
  disadvantages_starts_with?: Maybe<String>;
  disadvantages_not_starts_with?: Maybe<String>;
  disadvantages_ends_with?: Maybe<String>;
  disadvantages_not_ends_with?: Maybe<String>;
  homeownerInsurance?: Maybe<Float>;
  homeownerInsurance_not?: Maybe<Float>;
  homeownerInsurance_in?: Maybe<Float[] | Float>;
  homeownerInsurance_not_in?: Maybe<Float[] | Float>;
  homeownerInsurance_lt?: Maybe<Float>;
  homeownerInsurance_lte?: Maybe<Float>;
  homeownerInsurance_gt?: Maybe<Float>;
  homeownerInsurance_gte?: Maybe<Float>;
  loanAmount?: Maybe<Float>;
  loanAmount_not?: Maybe<Float>;
  loanAmount_in?: Maybe<Float[] | Float>;
  loanAmount_not_in?: Maybe<Float[] | Float>;
  loanAmount_lt?: Maybe<Float>;
  loanAmount_lte?: Maybe<Float>;
  loanAmount_gt?: Maybe<Float>;
  loanAmount_gte?: Maybe<Float>;
  loanInsuranceRate?: Maybe<Float>;
  loanInsuranceRate_not?: Maybe<Float>;
  loanInsuranceRate_in?: Maybe<Float[] | Float>;
  loanInsuranceRate_not_in?: Maybe<Float[] | Float>;
  loanInsuranceRate_lt?: Maybe<Float>;
  loanInsuranceRate_lte?: Maybe<Float>;
  loanInsuranceRate_gt?: Maybe<Float>;
  loanInsuranceRate_gte?: Maybe<Float>;
  loanLender?: Maybe<String>;
  loanLender_not?: Maybe<String>;
  loanLender_in?: Maybe<String[] | String>;
  loanLender_not_in?: Maybe<String[] | String>;
  loanLender_lt?: Maybe<String>;
  loanLender_lte?: Maybe<String>;
  loanLender_gt?: Maybe<String>;
  loanLender_gte?: Maybe<String>;
  loanLender_contains?: Maybe<String>;
  loanLender_not_contains?: Maybe<String>;
  loanLender_starts_with?: Maybe<String>;
  loanLender_not_starts_with?: Maybe<String>;
  loanLender_ends_with?: Maybe<String>;
  loanLender_not_ends_with?: Maybe<String>;
  loanMensualRepaymentAmount?: Maybe<Float>;
  loanMensualRepaymentAmount_not?: Maybe<Float>;
  loanMensualRepaymentAmount_in?: Maybe<Float[] | Float>;
  loanMensualRepaymentAmount_not_in?: Maybe<Float[] | Float>;
  loanMensualRepaymentAmount_lt?: Maybe<Float>;
  loanMensualRepaymentAmount_lte?: Maybe<Float>;
  loanMensualRepaymentAmount_gt?: Maybe<Float>;
  loanMensualRepaymentAmount_gte?: Maybe<Float>;
  loanMonthsOfdeferredReimbursement?: Maybe<Int>;
  loanMonthsOfdeferredReimbursement_not?: Maybe<Int>;
  loanMonthsOfdeferredReimbursement_in?: Maybe<Int[] | Int>;
  loanMonthsOfdeferredReimbursement_not_in?: Maybe<Int[] | Int>;
  loanMonthsOfdeferredReimbursement_lt?: Maybe<Int>;
  loanMonthsOfdeferredReimbursement_lte?: Maybe<Int>;
  loanMonthsOfdeferredReimbursement_gt?: Maybe<Int>;
  loanMonthsOfdeferredReimbursement_gte?: Maybe<Int>;
  loanRate?: Maybe<Float>;
  loanRate_not?: Maybe<Float>;
  loanRate_in?: Maybe<Float[] | Float>;
  loanRate_not_in?: Maybe<Float[] | Float>;
  loanRate_lt?: Maybe<Float>;
  loanRate_lte?: Maybe<Float>;
  loanRate_gt?: Maybe<Float>;
  loanRate_gte?: Maybe<Float>;
  monthlyGain?: Maybe<Float>;
  monthlyGain_not?: Maybe<Float>;
  monthlyGain_in?: Maybe<Float[] | Float>;
  monthlyGain_not_in?: Maybe<Float[] | Float>;
  monthlyGain_lt?: Maybe<Float>;
  monthlyGain_lte?: Maybe<Float>;
  monthlyGain_gt?: Maybe<Float>;
  monthlyGain_gte?: Maybe<Float>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  notaryFees?: Maybe<Float>;
  notaryFees_not?: Maybe<Float>;
  notaryFees_in?: Maybe<Float[] | Float>;
  notaryFees_not_in?: Maybe<Float[] | Float>;
  notaryFees_lt?: Maybe<Float>;
  notaryFees_lte?: Maybe<Float>;
  notaryFees_gt?: Maybe<Float>;
  notaryFees_gte?: Maybe<Float>;
  numberOfMonths?: Maybe<Int>;
  numberOfMonths_not?: Maybe<Int>;
  numberOfMonths_in?: Maybe<Int[] | Int>;
  numberOfMonths_not_in?: Maybe<Int[] | Int>;
  numberOfMonths_lt?: Maybe<Int>;
  numberOfMonths_lte?: Maybe<Int>;
  numberOfMonths_gt?: Maybe<Int>;
  numberOfMonths_gte?: Maybe<Int>;
  paybackperiod?: Maybe<Int>;
  paybackperiod_not?: Maybe<Int>;
  paybackperiod_in?: Maybe<Int[] | Int>;
  paybackperiod_not_in?: Maybe<Int[] | Int>;
  paybackperiod_lt?: Maybe<Int>;
  paybackperiod_lte?: Maybe<Int>;
  paybackperiod_gt?: Maybe<Int>;
  paybackperiod_gte?: Maybe<Int>;
  personalContribution?: Maybe<Float>;
  personalContribution_not?: Maybe<Float>;
  personalContribution_in?: Maybe<Float[] | Float>;
  personalContribution_not_in?: Maybe<Float[] | Float>;
  personalContribution_lt?: Maybe<Float>;
  personalContribution_lte?: Maybe<Float>;
  personalContribution_gt?: Maybe<Float>;
  personalContribution_gte?: Maybe<Float>;
  personnalContribution?: Maybe<Float>;
  personnalContribution_not?: Maybe<Float>;
  personnalContribution_in?: Maybe<Float[] | Float>;
  personnalContribution_not_in?: Maybe<Float[] | Float>;
  personnalContribution_lt?: Maybe<Float>;
  personnalContribution_lte?: Maybe<Float>;
  personnalContribution_gt?: Maybe<Float>;
  personnalContribution_gte?: Maybe<Float>;
  propertyTax?: Maybe<Float>;
  propertyTax_not?: Maybe<Float>;
  propertyTax_in?: Maybe<Float[] | Float>;
  propertyTax_not_in?: Maybe<Float[] | Float>;
  propertyTax_lt?: Maybe<Float>;
  propertyTax_lte?: Maybe<Float>;
  propertyTax_gt?: Maybe<Float>;
  propertyTax_gte?: Maybe<Float>;
  realEstatePrice?: Maybe<Float>;
  realEstatePrice_not?: Maybe<Float>;
  realEstatePrice_in?: Maybe<Float[] | Float>;
  realEstatePrice_not_in?: Maybe<Float[] | Float>;
  realEstatePrice_lt?: Maybe<Float>;
  realEstatePrice_lte?: Maybe<Float>;
  realEstatePrice_gt?: Maybe<Float>;
  realEstatePrice_gte?: Maybe<Float>;
  renovationsPrice?: Maybe<Float>;
  renovationsPrice_not?: Maybe<Float>;
  renovationsPrice_in?: Maybe<Float[] | Float>;
  renovationsPrice_not_in?: Maybe<Float[] | Float>;
  renovationsPrice_lt?: Maybe<Float>;
  renovationsPrice_lte?: Maybe<Float>;
  renovationsPrice_gt?: Maybe<Float>;
  renovationsPrice_gte?: Maybe<Float>;
  taxes?: Maybe<Float>;
  taxes_not?: Maybe<Float>;
  taxes_in?: Maybe<Float[] | Float>;
  taxes_not_in?: Maybe<Float[] | Float>;
  taxes_lt?: Maybe<Float>;
  taxes_lte?: Maybe<Float>;
  taxes_gt?: Maybe<Float>;
  taxes_gte?: Maybe<Float>;
  AND?: Maybe<InvestmentScalarWhereInput[] | InvestmentScalarWhereInput>;
  OR?: Maybe<InvestmentScalarWhereInput[] | InvestmentScalarWhereInput>;
  NOT?: Maybe<InvestmentScalarWhereInput[] | InvestmentScalarWhereInput>;
}

export interface PropertyCreateWithoutInvestmentsInput {
  id?: Maybe<ID_Input>;
  author: UserCreateOneWithoutPropertiesInput;
  name: String;
  address?: Maybe<String>;
  advantages?: Maybe<String>;
  area?: Maybe<String>;
  bathroomsCount?: Maybe<Int>;
  bedroomsCount?: Maybe<Int>;
  city?: Maybe<String>;
  disadvantages?: Maybe<String>;
  floor?: Maybe<Int>;
  parking?: Maybe<Int>;
  surface?: Maybe<Float>;
  zipCode?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserCreateOneWithoutPropertiesInput {
  create?: Maybe<UserCreateWithoutPropertiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PropertySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PropertyWhereInput>;
  AND?: Maybe<
    PropertySubscriptionWhereInput[] | PropertySubscriptionWhereInput
  >;
  OR?: Maybe<PropertySubscriptionWhereInput[] | PropertySubscriptionWhereInput>;
  NOT?: Maybe<
    PropertySubscriptionWhereInput[] | PropertySubscriptionWhereInput
  >;
}

export interface UserCreateWithoutPropertiesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface InvestmentUpdateInput {
  property?: Maybe<PropertyUpdateOneRequiredWithoutInvestmentsInput>;
  advantages?: Maybe<String>;
  condominiumFees?: Maybe<Float>;
  csgTax?: Maybe<Float>;
  description?: Maybe<String>;
  disadvantages?: Maybe<String>;
  homeownerInsurance?: Maybe<Float>;
  loanAmount?: Maybe<Float>;
  loanInsuranceRate?: Maybe<Float>;
  loanLender?: Maybe<String>;
  loanMensualRepaymentAmount?: Maybe<Float>;
  loanMonthsOfdeferredReimbursement?: Maybe<Int>;
  loanRate?: Maybe<Float>;
  monthlyGain?: Maybe<Float>;
  name?: Maybe<String>;
  notaryFees?: Maybe<Float>;
  numberOfMonths?: Maybe<Int>;
  paybackperiod?: Maybe<Int>;
  personalContribution?: Maybe<Float>;
  personnalContribution?: Maybe<Float>;
  propertyTax?: Maybe<Float>;
  realEstatePrice?: Maybe<Float>;
  renovationsPrice?: Maybe<Float>;
  taxes?: Maybe<Float>;
}

export interface PropertyUpdateManyWithWhereNestedInput {
  where: PropertyScalarWhereInput;
  data: PropertyUpdateManyDataInput;
}

export interface PropertyUpdateOneRequiredWithoutInvestmentsInput {
  create?: Maybe<PropertyCreateWithoutInvestmentsInput>;
  update?: Maybe<PropertyUpdateWithoutInvestmentsDataInput>;
  upsert?: Maybe<PropertyUpsertWithoutInvestmentsInput>;
  connect?: Maybe<PropertyWhereUniqueInput>;
}

export interface PropertyUpsertWithWhereUniqueWithoutAuthorInput {
  where: PropertyWhereUniqueInput;
  update: PropertyUpdateWithoutAuthorDataInput;
  create: PropertyCreateWithoutAuthorInput;
}

export interface PropertyUpdateWithoutInvestmentsDataInput {
  author?: Maybe<UserUpdateOneRequiredWithoutPropertiesInput>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  advantages?: Maybe<String>;
  area?: Maybe<String>;
  bathroomsCount?: Maybe<Int>;
  bedroomsCount?: Maybe<Int>;
  city?: Maybe<String>;
  disadvantages?: Maybe<String>;
  floor?: Maybe<Int>;
  parking?: Maybe<Int>;
  surface?: Maybe<Float>;
  zipCode?: Maybe<String>;
}

export type PropertyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateOneRequiredWithoutPropertiesInput {
  create?: Maybe<UserCreateWithoutPropertiesInput>;
  update?: Maybe<UserUpdateWithoutPropertiesDataInput>;
  upsert?: Maybe<UserUpsertWithoutPropertiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PropertyUpdateManyWithoutAuthorInput {
  create?: Maybe<
    PropertyCreateWithoutAuthorInput[] | PropertyCreateWithoutAuthorInput
  >;
  delete?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
  connect?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
  set?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
  disconnect?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
  update?: Maybe<
    | PropertyUpdateWithWhereUniqueWithoutAuthorInput[]
    | PropertyUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PropertyUpsertWithWhereUniqueWithoutAuthorInput[]
    | PropertyUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<PropertyScalarWhereInput[] | PropertyScalarWhereInput>;
  updateMany?: Maybe<
    | PropertyUpdateManyWithWhereNestedInput[]
    | PropertyUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithoutPropertiesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface InvestmentUpdateManyDataInput {
  advantages?: Maybe<String>;
  condominiumFees?: Maybe<Float>;
  csgTax?: Maybe<Float>;
  description?: Maybe<String>;
  disadvantages?: Maybe<String>;
  homeownerInsurance?: Maybe<Float>;
  loanAmount?: Maybe<Float>;
  loanInsuranceRate?: Maybe<Float>;
  loanLender?: Maybe<String>;
  loanMensualRepaymentAmount?: Maybe<Float>;
  loanMonthsOfdeferredReimbursement?: Maybe<Int>;
  loanRate?: Maybe<Float>;
  monthlyGain?: Maybe<Float>;
  name?: Maybe<String>;
  notaryFees?: Maybe<Float>;
  numberOfMonths?: Maybe<Int>;
  paybackperiod?: Maybe<Int>;
  personalContribution?: Maybe<Float>;
  personnalContribution?: Maybe<Float>;
  propertyTax?: Maybe<Float>;
  realEstatePrice?: Maybe<Float>;
  renovationsPrice?: Maybe<Float>;
  taxes?: Maybe<Float>;
}

export interface PropertyCreateManyWithoutAuthorInput {
  create?: Maybe<
    PropertyCreateWithoutAuthorInput[] | PropertyCreateWithoutAuthorInput
  >;
  connect?: Maybe<PropertyWhereUniqueInput[] | PropertyWhereUniqueInput>;
}

export interface PropertyUpsertWithoutInvestmentsInput {
  update: PropertyUpdateWithoutInvestmentsDataInput;
  create: PropertyCreateWithoutInvestmentsInput;
}

export interface PropertyUpdateManyMutationInput {
  name?: Maybe<String>;
  address?: Maybe<String>;
  advantages?: Maybe<String>;
  area?: Maybe<String>;
  bathroomsCount?: Maybe<Int>;
  bedroomsCount?: Maybe<Int>;
  city?: Maybe<String>;
  disadvantages?: Maybe<String>;
  floor?: Maybe<Int>;
  parking?: Maybe<Int>;
  surface?: Maybe<Float>;
  zipCode?: Maybe<String>;
}

export interface InvestmentUpdateManyMutationInput {
  advantages?: Maybe<String>;
  condominiumFees?: Maybe<Float>;
  csgTax?: Maybe<Float>;
  description?: Maybe<String>;
  disadvantages?: Maybe<String>;
  homeownerInsurance?: Maybe<Float>;
  loanAmount?: Maybe<Float>;
  loanInsuranceRate?: Maybe<Float>;
  loanLender?: Maybe<String>;
  loanMensualRepaymentAmount?: Maybe<Float>;
  loanMonthsOfdeferredReimbursement?: Maybe<Int>;
  loanRate?: Maybe<Float>;
  monthlyGain?: Maybe<Float>;
  name?: Maybe<String>;
  notaryFees?: Maybe<Float>;
  numberOfMonths?: Maybe<Int>;
  paybackperiod?: Maybe<Int>;
  personalContribution?: Maybe<Float>;
  personnalContribution?: Maybe<Float>;
  propertyTax?: Maybe<Float>;
  realEstatePrice?: Maybe<Float>;
  renovationsPrice?: Maybe<Float>;
  taxes?: Maybe<Float>;
}

export interface InvestmentCreateInput {
  id?: Maybe<ID_Input>;
  property: PropertyCreateOneWithoutInvestmentsInput;
  advantages?: Maybe<String>;
  condominiumFees?: Maybe<Float>;
  csgTax?: Maybe<Float>;
  description?: Maybe<String>;
  disadvantages?: Maybe<String>;
  homeownerInsurance?: Maybe<Float>;
  loanAmount?: Maybe<Float>;
  loanInsuranceRate?: Maybe<Float>;
  loanLender?: Maybe<String>;
  loanMensualRepaymentAmount?: Maybe<Float>;
  loanMonthsOfdeferredReimbursement?: Maybe<Int>;
  loanRate?: Maybe<Float>;
  monthlyGain?: Maybe<Float>;
  name?: Maybe<String>;
  notaryFees?: Maybe<Float>;
  numberOfMonths?: Maybe<Int>;
  paybackperiod?: Maybe<Int>;
  personalContribution?: Maybe<Float>;
  personnalContribution?: Maybe<Float>;
  propertyTax?: Maybe<Float>;
  realEstatePrice?: Maybe<Float>;
  renovationsPrice?: Maybe<Float>;
  taxes?: Maybe<Float>;
}

export interface PropertyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  author?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  advantages?: Maybe<String>;
  advantages_not?: Maybe<String>;
  advantages_in?: Maybe<String[] | String>;
  advantages_not_in?: Maybe<String[] | String>;
  advantages_lt?: Maybe<String>;
  advantages_lte?: Maybe<String>;
  advantages_gt?: Maybe<String>;
  advantages_gte?: Maybe<String>;
  advantages_contains?: Maybe<String>;
  advantages_not_contains?: Maybe<String>;
  advantages_starts_with?: Maybe<String>;
  advantages_not_starts_with?: Maybe<String>;
  advantages_ends_with?: Maybe<String>;
  advantages_not_ends_with?: Maybe<String>;
  area?: Maybe<String>;
  area_not?: Maybe<String>;
  area_in?: Maybe<String[] | String>;
  area_not_in?: Maybe<String[] | String>;
  area_lt?: Maybe<String>;
  area_lte?: Maybe<String>;
  area_gt?: Maybe<String>;
  area_gte?: Maybe<String>;
  area_contains?: Maybe<String>;
  area_not_contains?: Maybe<String>;
  area_starts_with?: Maybe<String>;
  area_not_starts_with?: Maybe<String>;
  area_ends_with?: Maybe<String>;
  area_not_ends_with?: Maybe<String>;
  bathroomsCount?: Maybe<Int>;
  bathroomsCount_not?: Maybe<Int>;
  bathroomsCount_in?: Maybe<Int[] | Int>;
  bathroomsCount_not_in?: Maybe<Int[] | Int>;
  bathroomsCount_lt?: Maybe<Int>;
  bathroomsCount_lte?: Maybe<Int>;
  bathroomsCount_gt?: Maybe<Int>;
  bathroomsCount_gte?: Maybe<Int>;
  bedroomsCount?: Maybe<Int>;
  bedroomsCount_not?: Maybe<Int>;
  bedroomsCount_in?: Maybe<Int[] | Int>;
  bedroomsCount_not_in?: Maybe<Int[] | Int>;
  bedroomsCount_lt?: Maybe<Int>;
  bedroomsCount_lte?: Maybe<Int>;
  bedroomsCount_gt?: Maybe<Int>;
  bedroomsCount_gte?: Maybe<Int>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  disadvantages?: Maybe<String>;
  disadvantages_not?: Maybe<String>;
  disadvantages_in?: Maybe<String[] | String>;
  disadvantages_not_in?: Maybe<String[] | String>;
  disadvantages_lt?: Maybe<String>;
  disadvantages_lte?: Maybe<String>;
  disadvantages_gt?: Maybe<String>;
  disadvantages_gte?: Maybe<String>;
  disadvantages_contains?: Maybe<String>;
  disadvantages_not_contains?: Maybe<String>;
  disadvantages_starts_with?: Maybe<String>;
  disadvantages_not_starts_with?: Maybe<String>;
  disadvantages_ends_with?: Maybe<String>;
  disadvantages_not_ends_with?: Maybe<String>;
  floor?: Maybe<Int>;
  floor_not?: Maybe<Int>;
  floor_in?: Maybe<Int[] | Int>;
  floor_not_in?: Maybe<Int[] | Int>;
  floor_lt?: Maybe<Int>;
  floor_lte?: Maybe<Int>;
  floor_gt?: Maybe<Int>;
  floor_gte?: Maybe<Int>;
  investments_every?: Maybe<InvestmentWhereInput>;
  investments_some?: Maybe<InvestmentWhereInput>;
  investments_none?: Maybe<InvestmentWhereInput>;
  parking?: Maybe<Int>;
  parking_not?: Maybe<Int>;
  parking_in?: Maybe<Int[] | Int>;
  parking_not_in?: Maybe<Int[] | Int>;
  parking_lt?: Maybe<Int>;
  parking_lte?: Maybe<Int>;
  parking_gt?: Maybe<Int>;
  parking_gte?: Maybe<Int>;
  surface?: Maybe<Float>;
  surface_not?: Maybe<Float>;
  surface_in?: Maybe<Float[] | Float>;
  surface_not_in?: Maybe<Float[] | Float>;
  surface_lt?: Maybe<Float>;
  surface_lte?: Maybe<Float>;
  surface_gt?: Maybe<Float>;
  surface_gte?: Maybe<Float>;
  zipCode?: Maybe<String>;
  zipCode_not?: Maybe<String>;
  zipCode_in?: Maybe<String[] | String>;
  zipCode_not_in?: Maybe<String[] | String>;
  zipCode_lt?: Maybe<String>;
  zipCode_lte?: Maybe<String>;
  zipCode_gt?: Maybe<String>;
  zipCode_gte?: Maybe<String>;
  zipCode_contains?: Maybe<String>;
  zipCode_not_contains?: Maybe<String>;
  zipCode_starts_with?: Maybe<String>;
  zipCode_not_starts_with?: Maybe<String>;
  zipCode_ends_with?: Maybe<String>;
  zipCode_not_ends_with?: Maybe<String>;
  AND?: Maybe<PropertyWhereInput[] | PropertyWhereInput>;
  OR?: Maybe<PropertyWhereInput[] | PropertyWhereInput>;
  NOT?: Maybe<PropertyWhereInput[] | PropertyWhereInput>;
}

export interface InvestmentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  property?: Maybe<PropertyWhereInput>;
  advantages?: Maybe<String>;
  advantages_not?: Maybe<String>;
  advantages_in?: Maybe<String[] | String>;
  advantages_not_in?: Maybe<String[] | String>;
  advantages_lt?: Maybe<String>;
  advantages_lte?: Maybe<String>;
  advantages_gt?: Maybe<String>;
  advantages_gte?: Maybe<String>;
  advantages_contains?: Maybe<String>;
  advantages_not_contains?: Maybe<String>;
  advantages_starts_with?: Maybe<String>;
  advantages_not_starts_with?: Maybe<String>;
  advantages_ends_with?: Maybe<String>;
  advantages_not_ends_with?: Maybe<String>;
  condominiumFees?: Maybe<Float>;
  condominiumFees_not?: Maybe<Float>;
  condominiumFees_in?: Maybe<Float[] | Float>;
  condominiumFees_not_in?: Maybe<Float[] | Float>;
  condominiumFees_lt?: Maybe<Float>;
  condominiumFees_lte?: Maybe<Float>;
  condominiumFees_gt?: Maybe<Float>;
  condominiumFees_gte?: Maybe<Float>;
  csgTax?: Maybe<Float>;
  csgTax_not?: Maybe<Float>;
  csgTax_in?: Maybe<Float[] | Float>;
  csgTax_not_in?: Maybe<Float[] | Float>;
  csgTax_lt?: Maybe<Float>;
  csgTax_lte?: Maybe<Float>;
  csgTax_gt?: Maybe<Float>;
  csgTax_gte?: Maybe<Float>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  disadvantages?: Maybe<String>;
  disadvantages_not?: Maybe<String>;
  disadvantages_in?: Maybe<String[] | String>;
  disadvantages_not_in?: Maybe<String[] | String>;
  disadvantages_lt?: Maybe<String>;
  disadvantages_lte?: Maybe<String>;
  disadvantages_gt?: Maybe<String>;
  disadvantages_gte?: Maybe<String>;
  disadvantages_contains?: Maybe<String>;
  disadvantages_not_contains?: Maybe<String>;
  disadvantages_starts_with?: Maybe<String>;
  disadvantages_not_starts_with?: Maybe<String>;
  disadvantages_ends_with?: Maybe<String>;
  disadvantages_not_ends_with?: Maybe<String>;
  homeownerInsurance?: Maybe<Float>;
  homeownerInsurance_not?: Maybe<Float>;
  homeownerInsurance_in?: Maybe<Float[] | Float>;
  homeownerInsurance_not_in?: Maybe<Float[] | Float>;
  homeownerInsurance_lt?: Maybe<Float>;
  homeownerInsurance_lte?: Maybe<Float>;
  homeownerInsurance_gt?: Maybe<Float>;
  homeownerInsurance_gte?: Maybe<Float>;
  loanAmount?: Maybe<Float>;
  loanAmount_not?: Maybe<Float>;
  loanAmount_in?: Maybe<Float[] | Float>;
  loanAmount_not_in?: Maybe<Float[] | Float>;
  loanAmount_lt?: Maybe<Float>;
  loanAmount_lte?: Maybe<Float>;
  loanAmount_gt?: Maybe<Float>;
  loanAmount_gte?: Maybe<Float>;
  loanInsuranceRate?: Maybe<Float>;
  loanInsuranceRate_not?: Maybe<Float>;
  loanInsuranceRate_in?: Maybe<Float[] | Float>;
  loanInsuranceRate_not_in?: Maybe<Float[] | Float>;
  loanInsuranceRate_lt?: Maybe<Float>;
  loanInsuranceRate_lte?: Maybe<Float>;
  loanInsuranceRate_gt?: Maybe<Float>;
  loanInsuranceRate_gte?: Maybe<Float>;
  loanLender?: Maybe<String>;
  loanLender_not?: Maybe<String>;
  loanLender_in?: Maybe<String[] | String>;
  loanLender_not_in?: Maybe<String[] | String>;
  loanLender_lt?: Maybe<String>;
  loanLender_lte?: Maybe<String>;
  loanLender_gt?: Maybe<String>;
  loanLender_gte?: Maybe<String>;
  loanLender_contains?: Maybe<String>;
  loanLender_not_contains?: Maybe<String>;
  loanLender_starts_with?: Maybe<String>;
  loanLender_not_starts_with?: Maybe<String>;
  loanLender_ends_with?: Maybe<String>;
  loanLender_not_ends_with?: Maybe<String>;
  loanMensualRepaymentAmount?: Maybe<Float>;
  loanMensualRepaymentAmount_not?: Maybe<Float>;
  loanMensualRepaymentAmount_in?: Maybe<Float[] | Float>;
  loanMensualRepaymentAmount_not_in?: Maybe<Float[] | Float>;
  loanMensualRepaymentAmount_lt?: Maybe<Float>;
  loanMensualRepaymentAmount_lte?: Maybe<Float>;
  loanMensualRepaymentAmount_gt?: Maybe<Float>;
  loanMensualRepaymentAmount_gte?: Maybe<Float>;
  loanMonthsOfdeferredReimbursement?: Maybe<Int>;
  loanMonthsOfdeferredReimbursement_not?: Maybe<Int>;
  loanMonthsOfdeferredReimbursement_in?: Maybe<Int[] | Int>;
  loanMonthsOfdeferredReimbursement_not_in?: Maybe<Int[] | Int>;
  loanMonthsOfdeferredReimbursement_lt?: Maybe<Int>;
  loanMonthsOfdeferredReimbursement_lte?: Maybe<Int>;
  loanMonthsOfdeferredReimbursement_gt?: Maybe<Int>;
  loanMonthsOfdeferredReimbursement_gte?: Maybe<Int>;
  loanRate?: Maybe<Float>;
  loanRate_not?: Maybe<Float>;
  loanRate_in?: Maybe<Float[] | Float>;
  loanRate_not_in?: Maybe<Float[] | Float>;
  loanRate_lt?: Maybe<Float>;
  loanRate_lte?: Maybe<Float>;
  loanRate_gt?: Maybe<Float>;
  loanRate_gte?: Maybe<Float>;
  monthlyGain?: Maybe<Float>;
  monthlyGain_not?: Maybe<Float>;
  monthlyGain_in?: Maybe<Float[] | Float>;
  monthlyGain_not_in?: Maybe<Float[] | Float>;
  monthlyGain_lt?: Maybe<Float>;
  monthlyGain_lte?: Maybe<Float>;
  monthlyGain_gt?: Maybe<Float>;
  monthlyGain_gte?: Maybe<Float>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  notaryFees?: Maybe<Float>;
  notaryFees_not?: Maybe<Float>;
  notaryFees_in?: Maybe<Float[] | Float>;
  notaryFees_not_in?: Maybe<Float[] | Float>;
  notaryFees_lt?: Maybe<Float>;
  notaryFees_lte?: Maybe<Float>;
  notaryFees_gt?: Maybe<Float>;
  notaryFees_gte?: Maybe<Float>;
  numberOfMonths?: Maybe<Int>;
  numberOfMonths_not?: Maybe<Int>;
  numberOfMonths_in?: Maybe<Int[] | Int>;
  numberOfMonths_not_in?: Maybe<Int[] | Int>;
  numberOfMonths_lt?: Maybe<Int>;
  numberOfMonths_lte?: Maybe<Int>;
  numberOfMonths_gt?: Maybe<Int>;
  numberOfMonths_gte?: Maybe<Int>;
  paybackperiod?: Maybe<Int>;
  paybackperiod_not?: Maybe<Int>;
  paybackperiod_in?: Maybe<Int[] | Int>;
  paybackperiod_not_in?: Maybe<Int[] | Int>;
  paybackperiod_lt?: Maybe<Int>;
  paybackperiod_lte?: Maybe<Int>;
  paybackperiod_gt?: Maybe<Int>;
  paybackperiod_gte?: Maybe<Int>;
  personalContribution?: Maybe<Float>;
  personalContribution_not?: Maybe<Float>;
  personalContribution_in?: Maybe<Float[] | Float>;
  personalContribution_not_in?: Maybe<Float[] | Float>;
  personalContribution_lt?: Maybe<Float>;
  personalContribution_lte?: Maybe<Float>;
  personalContribution_gt?: Maybe<Float>;
  personalContribution_gte?: Maybe<Float>;
  personnalContribution?: Maybe<Float>;
  personnalContribution_not?: Maybe<Float>;
  personnalContribution_in?: Maybe<Float[] | Float>;
  personnalContribution_not_in?: Maybe<Float[] | Float>;
  personnalContribution_lt?: Maybe<Float>;
  personnalContribution_lte?: Maybe<Float>;
  personnalContribution_gt?: Maybe<Float>;
  personnalContribution_gte?: Maybe<Float>;
  propertyTax?: Maybe<Float>;
  propertyTax_not?: Maybe<Float>;
  propertyTax_in?: Maybe<Float[] | Float>;
  propertyTax_not_in?: Maybe<Float[] | Float>;
  propertyTax_lt?: Maybe<Float>;
  propertyTax_lte?: Maybe<Float>;
  propertyTax_gt?: Maybe<Float>;
  propertyTax_gte?: Maybe<Float>;
  realEstatePrice?: Maybe<Float>;
  realEstatePrice_not?: Maybe<Float>;
  realEstatePrice_in?: Maybe<Float[] | Float>;
  realEstatePrice_not_in?: Maybe<Float[] | Float>;
  realEstatePrice_lt?: Maybe<Float>;
  realEstatePrice_lte?: Maybe<Float>;
  realEstatePrice_gt?: Maybe<Float>;
  realEstatePrice_gte?: Maybe<Float>;
  renovationsPrice?: Maybe<Float>;
  renovationsPrice_not?: Maybe<Float>;
  renovationsPrice_in?: Maybe<Float[] | Float>;
  renovationsPrice_not_in?: Maybe<Float[] | Float>;
  renovationsPrice_lt?: Maybe<Float>;
  renovationsPrice_lte?: Maybe<Float>;
  renovationsPrice_gt?: Maybe<Float>;
  renovationsPrice_gte?: Maybe<Float>;
  taxes?: Maybe<Float>;
  taxes_not?: Maybe<Float>;
  taxes_in?: Maybe<Float[] | Float>;
  taxes_not_in?: Maybe<Float[] | Float>;
  taxes_lt?: Maybe<Float>;
  taxes_lte?: Maybe<Float>;
  taxes_gt?: Maybe<Float>;
  taxes_gte?: Maybe<Float>;
  AND?: Maybe<InvestmentWhereInput[] | InvestmentWhereInput>;
  OR?: Maybe<InvestmentWhereInput[] | InvestmentWhereInput>;
  NOT?: Maybe<InvestmentWhereInput[] | InvestmentWhereInput>;
}

export interface InvestmentUpdateManyWithWhereNestedInput {
  where: InvestmentScalarWhereInput;
  data: InvestmentUpdateManyDataInput;
}

export interface PropertyUpdateManyDataInput {
  name?: Maybe<String>;
  address?: Maybe<String>;
  advantages?: Maybe<String>;
  area?: Maybe<String>;
  bathroomsCount?: Maybe<Int>;
  bedroomsCount?: Maybe<Int>;
  city?: Maybe<String>;
  disadvantages?: Maybe<String>;
  floor?: Maybe<Int>;
  parking?: Maybe<Int>;
  surface?: Maybe<Float>;
  zipCode?: Maybe<String>;
}

export interface PropertyCreateInput {
  id?: Maybe<ID_Input>;
  author: UserCreateOneWithoutPropertiesInput;
  name: String;
  address?: Maybe<String>;
  advantages?: Maybe<String>;
  area?: Maybe<String>;
  bathroomsCount?: Maybe<Int>;
  bedroomsCount?: Maybe<Int>;
  city?: Maybe<String>;
  disadvantages?: Maybe<String>;
  floor?: Maybe<Int>;
  investments?: Maybe<InvestmentCreateManyWithoutPropertyInput>;
  parking?: Maybe<Int>;
  surface?: Maybe<Float>;
  zipCode?: Maybe<String>;
}

export interface PropertyUpdateWithoutAuthorDataInput {
  name?: Maybe<String>;
  address?: Maybe<String>;
  advantages?: Maybe<String>;
  area?: Maybe<String>;
  bathroomsCount?: Maybe<Int>;
  bedroomsCount?: Maybe<Int>;
  city?: Maybe<String>;
  disadvantages?: Maybe<String>;
  floor?: Maybe<Int>;
  investments?: Maybe<InvestmentUpdateManyWithoutPropertyInput>;
  parking?: Maybe<Int>;
  surface?: Maybe<Float>;
  zipCode?: Maybe<String>;
}

export interface InvestmentCreateManyWithoutPropertyInput {
  create?: Maybe<
    | InvestmentCreateWithoutPropertyInput[]
    | InvestmentCreateWithoutPropertyInput
  >;
  connect?: Maybe<InvestmentWhereUniqueInput[] | InvestmentWhereUniqueInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  properties?: Maybe<PropertyUpdateManyWithoutAuthorInput>;
}

export interface InvestmentCreateWithoutPropertyInput {
  id?: Maybe<ID_Input>;
  advantages?: Maybe<String>;
  condominiumFees?: Maybe<Float>;
  csgTax?: Maybe<Float>;
  description?: Maybe<String>;
  disadvantages?: Maybe<String>;
  homeownerInsurance?: Maybe<Float>;
  loanAmount?: Maybe<Float>;
  loanInsuranceRate?: Maybe<Float>;
  loanLender?: Maybe<String>;
  loanMensualRepaymentAmount?: Maybe<Float>;
  loanMonthsOfdeferredReimbursement?: Maybe<Int>;
  loanRate?: Maybe<Float>;
  monthlyGain?: Maybe<Float>;
  name?: Maybe<String>;
  notaryFees?: Maybe<Float>;
  numberOfMonths?: Maybe<Int>;
  paybackperiod?: Maybe<Int>;
  personalContribution?: Maybe<Float>;
  personnalContribution?: Maybe<Float>;
  propertyTax?: Maybe<Float>;
  realEstatePrice?: Maybe<Float>;
  renovationsPrice?: Maybe<Float>;
  taxes?: Maybe<Float>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  properties?: Maybe<PropertyCreateManyWithoutAuthorInput>;
}

export interface PropertyUpdateInput {
  author?: Maybe<UserUpdateOneRequiredWithoutPropertiesInput>;
  name?: Maybe<String>;
  address?: Maybe<String>;
  advantages?: Maybe<String>;
  area?: Maybe<String>;
  bathroomsCount?: Maybe<Int>;
  bedroomsCount?: Maybe<Int>;
  city?: Maybe<String>;
  disadvantages?: Maybe<String>;
  floor?: Maybe<Int>;
  investments?: Maybe<InvestmentUpdateManyWithoutPropertyInput>;
  parking?: Maybe<Int>;
  surface?: Maybe<Float>;
  zipCode?: Maybe<String>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  properties_every?: Maybe<PropertyWhereInput>;
  properties_some?: Maybe<PropertyWhereInput>;
  properties_none?: Maybe<PropertyWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface InvestmentUpsertWithWhereUniqueWithoutPropertyInput {
  where: InvestmentWhereUniqueInput;
  update: InvestmentUpdateWithoutPropertyDataInput;
  create: InvestmentCreateWithoutPropertyInput;
}

export interface InvestmentUpdateWithoutPropertyDataInput {
  advantages?: Maybe<String>;
  condominiumFees?: Maybe<Float>;
  csgTax?: Maybe<Float>;
  description?: Maybe<String>;
  disadvantages?: Maybe<String>;
  homeownerInsurance?: Maybe<Float>;
  loanAmount?: Maybe<Float>;
  loanInsuranceRate?: Maybe<Float>;
  loanLender?: Maybe<String>;
  loanMensualRepaymentAmount?: Maybe<Float>;
  loanMonthsOfdeferredReimbursement?: Maybe<Int>;
  loanRate?: Maybe<Float>;
  monthlyGain?: Maybe<Float>;
  name?: Maybe<String>;
  notaryFees?: Maybe<Float>;
  numberOfMonths?: Maybe<Int>;
  paybackperiod?: Maybe<Int>;
  personalContribution?: Maybe<Float>;
  personnalContribution?: Maybe<Float>;
  propertyTax?: Maybe<Float>;
  realEstatePrice?: Maybe<Float>;
  renovationsPrice?: Maybe<Float>;
  taxes?: Maybe<Float>;
}

export interface InvestmentUpdateWithWhereUniqueWithoutPropertyInput {
  where: InvestmentWhereUniqueInput;
  data: InvestmentUpdateWithoutPropertyDataInput;
}

export interface InvestmentUpdateManyWithoutPropertyInput {
  create?: Maybe<
    | InvestmentCreateWithoutPropertyInput[]
    | InvestmentCreateWithoutPropertyInput
  >;
  delete?: Maybe<InvestmentWhereUniqueInput[] | InvestmentWhereUniqueInput>;
  connect?: Maybe<InvestmentWhereUniqueInput[] | InvestmentWhereUniqueInput>;
  set?: Maybe<InvestmentWhereUniqueInput[] | InvestmentWhereUniqueInput>;
  disconnect?: Maybe<InvestmentWhereUniqueInput[] | InvestmentWhereUniqueInput>;
  update?: Maybe<
    | InvestmentUpdateWithWhereUniqueWithoutPropertyInput[]
    | InvestmentUpdateWithWhereUniqueWithoutPropertyInput
  >;
  upsert?: Maybe<
    | InvestmentUpsertWithWhereUniqueWithoutPropertyInput[]
    | InvestmentUpsertWithWhereUniqueWithoutPropertyInput
  >;
  deleteMany?: Maybe<InvestmentScalarWhereInput[] | InvestmentScalarWhereInput>;
  updateMany?: Maybe<
    | InvestmentUpdateManyWithWhereNestedInput[]
    | InvestmentUpdateManyWithWhereNestedInput
  >;
}

export interface InvestmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InvestmentWhereInput>;
  AND?: Maybe<
    InvestmentSubscriptionWhereInput[] | InvestmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    InvestmentSubscriptionWhereInput[] | InvestmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    InvestmentSubscriptionWhereInput[] | InvestmentSubscriptionWhereInput
  >;
}

export interface PropertyCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  name: String;
  address?: Maybe<String>;
  advantages?: Maybe<String>;
  area?: Maybe<String>;
  bathroomsCount?: Maybe<Int>;
  bedroomsCount?: Maybe<Int>;
  city?: Maybe<String>;
  disadvantages?: Maybe<String>;
  floor?: Maybe<Int>;
  investments?: Maybe<InvestmentCreateManyWithoutPropertyInput>;
  parking?: Maybe<Int>;
  surface?: Maybe<Float>;
  zipCode?: Maybe<String>;
}

export interface PropertyUpdateWithWhereUniqueWithoutAuthorInput {
  where: PropertyWhereUniqueInput;
  data: PropertyUpdateWithoutAuthorDataInput;
}

export interface PropertyScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  advantages?: Maybe<String>;
  advantages_not?: Maybe<String>;
  advantages_in?: Maybe<String[] | String>;
  advantages_not_in?: Maybe<String[] | String>;
  advantages_lt?: Maybe<String>;
  advantages_lte?: Maybe<String>;
  advantages_gt?: Maybe<String>;
  advantages_gte?: Maybe<String>;
  advantages_contains?: Maybe<String>;
  advantages_not_contains?: Maybe<String>;
  advantages_starts_with?: Maybe<String>;
  advantages_not_starts_with?: Maybe<String>;
  advantages_ends_with?: Maybe<String>;
  advantages_not_ends_with?: Maybe<String>;
  area?: Maybe<String>;
  area_not?: Maybe<String>;
  area_in?: Maybe<String[] | String>;
  area_not_in?: Maybe<String[] | String>;
  area_lt?: Maybe<String>;
  area_lte?: Maybe<String>;
  area_gt?: Maybe<String>;
  area_gte?: Maybe<String>;
  area_contains?: Maybe<String>;
  area_not_contains?: Maybe<String>;
  area_starts_with?: Maybe<String>;
  area_not_starts_with?: Maybe<String>;
  area_ends_with?: Maybe<String>;
  area_not_ends_with?: Maybe<String>;
  bathroomsCount?: Maybe<Int>;
  bathroomsCount_not?: Maybe<Int>;
  bathroomsCount_in?: Maybe<Int[] | Int>;
  bathroomsCount_not_in?: Maybe<Int[] | Int>;
  bathroomsCount_lt?: Maybe<Int>;
  bathroomsCount_lte?: Maybe<Int>;
  bathroomsCount_gt?: Maybe<Int>;
  bathroomsCount_gte?: Maybe<Int>;
  bedroomsCount?: Maybe<Int>;
  bedroomsCount_not?: Maybe<Int>;
  bedroomsCount_in?: Maybe<Int[] | Int>;
  bedroomsCount_not_in?: Maybe<Int[] | Int>;
  bedroomsCount_lt?: Maybe<Int>;
  bedroomsCount_lte?: Maybe<Int>;
  bedroomsCount_gt?: Maybe<Int>;
  bedroomsCount_gte?: Maybe<Int>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  disadvantages?: Maybe<String>;
  disadvantages_not?: Maybe<String>;
  disadvantages_in?: Maybe<String[] | String>;
  disadvantages_not_in?: Maybe<String[] | String>;
  disadvantages_lt?: Maybe<String>;
  disadvantages_lte?: Maybe<String>;
  disadvantages_gt?: Maybe<String>;
  disadvantages_gte?: Maybe<String>;
  disadvantages_contains?: Maybe<String>;
  disadvantages_not_contains?: Maybe<String>;
  disadvantages_starts_with?: Maybe<String>;
  disadvantages_not_starts_with?: Maybe<String>;
  disadvantages_ends_with?: Maybe<String>;
  disadvantages_not_ends_with?: Maybe<String>;
  floor?: Maybe<Int>;
  floor_not?: Maybe<Int>;
  floor_in?: Maybe<Int[] | Int>;
  floor_not_in?: Maybe<Int[] | Int>;
  floor_lt?: Maybe<Int>;
  floor_lte?: Maybe<Int>;
  floor_gt?: Maybe<Int>;
  floor_gte?: Maybe<Int>;
  parking?: Maybe<Int>;
  parking_not?: Maybe<Int>;
  parking_in?: Maybe<Int[] | Int>;
  parking_not_in?: Maybe<Int[] | Int>;
  parking_lt?: Maybe<Int>;
  parking_lte?: Maybe<Int>;
  parking_gt?: Maybe<Int>;
  parking_gte?: Maybe<Int>;
  surface?: Maybe<Float>;
  surface_not?: Maybe<Float>;
  surface_in?: Maybe<Float[] | Float>;
  surface_not_in?: Maybe<Float[] | Float>;
  surface_lt?: Maybe<Float>;
  surface_lte?: Maybe<Float>;
  surface_gt?: Maybe<Float>;
  surface_gte?: Maybe<Float>;
  zipCode?: Maybe<String>;
  zipCode_not?: Maybe<String>;
  zipCode_in?: Maybe<String[] | String>;
  zipCode_not_in?: Maybe<String[] | String>;
  zipCode_lt?: Maybe<String>;
  zipCode_lte?: Maybe<String>;
  zipCode_gt?: Maybe<String>;
  zipCode_gte?: Maybe<String>;
  zipCode_contains?: Maybe<String>;
  zipCode_not_contains?: Maybe<String>;
  zipCode_starts_with?: Maybe<String>;
  zipCode_not_starts_with?: Maybe<String>;
  zipCode_ends_with?: Maybe<String>;
  zipCode_not_ends_with?: Maybe<String>;
  AND?: Maybe<PropertyScalarWhereInput[] | PropertyScalarWhereInput>;
  OR?: Maybe<PropertyScalarWhereInput[] | PropertyScalarWhereInput>;
  NOT?: Maybe<PropertyScalarWhereInput[] | PropertyScalarWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface InvestmentEdge {
  node: Investment;
  cursor: String;
}

export interface InvestmentEdgePromise
  extends Promise<InvestmentEdge>,
    Fragmentable {
  node: <T = InvestmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InvestmentEdgeSubscription
  extends Promise<AsyncIterator<InvestmentEdge>>,
    Fragmentable {
  node: <T = InvestmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface InvestmentPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  advantages?: String;
  condominiumFees?: Float;
  csgTax?: Float;
  description?: String;
  disadvantages?: String;
  homeownerInsurance?: Float;
  loanAmount?: Float;
  loanInsuranceRate?: Float;
  loanLender?: String;
  loanMensualRepaymentAmount?: Float;
  loanMonthsOfdeferredReimbursement?: Int;
  loanRate?: Float;
  monthlyGain?: Float;
  name?: String;
  notaryFees?: Float;
  numberOfMonths?: Int;
  paybackperiod?: Int;
  personalContribution?: Float;
  personnalContribution?: Float;
  propertyTax?: Float;
  realEstatePrice?: Float;
  renovationsPrice?: Float;
  taxes?: Float;
}

export interface InvestmentPreviousValuesPromise
  extends Promise<InvestmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  advantages: () => Promise<String>;
  condominiumFees: () => Promise<Float>;
  csgTax: () => Promise<Float>;
  description: () => Promise<String>;
  disadvantages: () => Promise<String>;
  homeownerInsurance: () => Promise<Float>;
  loanAmount: () => Promise<Float>;
  loanInsuranceRate: () => Promise<Float>;
  loanLender: () => Promise<String>;
  loanMensualRepaymentAmount: () => Promise<Float>;
  loanMonthsOfdeferredReimbursement: () => Promise<Int>;
  loanRate: () => Promise<Float>;
  monthlyGain: () => Promise<Float>;
  name: () => Promise<String>;
  notaryFees: () => Promise<Float>;
  numberOfMonths: () => Promise<Int>;
  paybackperiod: () => Promise<Int>;
  personalContribution: () => Promise<Float>;
  personnalContribution: () => Promise<Float>;
  propertyTax: () => Promise<Float>;
  realEstatePrice: () => Promise<Float>;
  renovationsPrice: () => Promise<Float>;
  taxes: () => Promise<Float>;
}

export interface InvestmentPreviousValuesSubscription
  extends Promise<AsyncIterator<InvestmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  advantages: () => Promise<AsyncIterator<String>>;
  condominiumFees: () => Promise<AsyncIterator<Float>>;
  csgTax: () => Promise<AsyncIterator<Float>>;
  description: () => Promise<AsyncIterator<String>>;
  disadvantages: () => Promise<AsyncIterator<String>>;
  homeownerInsurance: () => Promise<AsyncIterator<Float>>;
  loanAmount: () => Promise<AsyncIterator<Float>>;
  loanInsuranceRate: () => Promise<AsyncIterator<Float>>;
  loanLender: () => Promise<AsyncIterator<String>>;
  loanMensualRepaymentAmount: () => Promise<AsyncIterator<Float>>;
  loanMonthsOfdeferredReimbursement: () => Promise<AsyncIterator<Int>>;
  loanRate: () => Promise<AsyncIterator<Float>>;
  monthlyGain: () => Promise<AsyncIterator<Float>>;
  name: () => Promise<AsyncIterator<String>>;
  notaryFees: () => Promise<AsyncIterator<Float>>;
  numberOfMonths: () => Promise<AsyncIterator<Int>>;
  paybackperiod: () => Promise<AsyncIterator<Int>>;
  personalContribution: () => Promise<AsyncIterator<Float>>;
  personnalContribution: () => Promise<AsyncIterator<Float>>;
  propertyTax: () => Promise<AsyncIterator<Float>>;
  realEstatePrice: () => Promise<AsyncIterator<Float>>;
  renovationsPrice: () => Promise<AsyncIterator<Float>>;
  taxes: () => Promise<AsyncIterator<Float>>;
}

export interface PropertyPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  address?: String;
  advantages?: String;
  area?: String;
  bathroomsCount?: Int;
  bedroomsCount?: Int;
  city?: String;
  disadvantages?: String;
  floor?: Int;
  parking?: Int;
  surface?: Float;
  zipCode?: String;
}

export interface PropertyPreviousValuesPromise
  extends Promise<PropertyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  advantages: () => Promise<String>;
  area: () => Promise<String>;
  bathroomsCount: () => Promise<Int>;
  bedroomsCount: () => Promise<Int>;
  city: () => Promise<String>;
  disadvantages: () => Promise<String>;
  floor: () => Promise<Int>;
  parking: () => Promise<Int>;
  surface: () => Promise<Float>;
  zipCode: () => Promise<String>;
}

export interface PropertyPreviousValuesSubscription
  extends Promise<AsyncIterator<PropertyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  advantages: () => Promise<AsyncIterator<String>>;
  area: () => Promise<AsyncIterator<String>>;
  bathroomsCount: () => Promise<AsyncIterator<Int>>;
  bedroomsCount: () => Promise<AsyncIterator<Int>>;
  city: () => Promise<AsyncIterator<String>>;
  disadvantages: () => Promise<AsyncIterator<String>>;
  floor: () => Promise<AsyncIterator<Int>>;
  parking: () => Promise<AsyncIterator<Int>>;
  surface: () => Promise<AsyncIterator<Float>>;
  zipCode: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PropertySubscriptionPayload {
  mutation: MutationType;
  node: Property;
  updatedFields: String[];
  previousValues: PropertyPreviousValues;
}

export interface PropertySubscriptionPayloadPromise
  extends Promise<PropertySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PropertyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PropertyPreviousValuesPromise>() => T;
}

export interface PropertySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PropertySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PropertySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PropertyPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface InvestmentConnection {
  pageInfo: PageInfo;
  edges: InvestmentEdge[];
}

export interface InvestmentConnectionPromise
  extends Promise<InvestmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InvestmentEdge>>() => T;
  aggregate: <T = AggregateInvestmentPromise>() => T;
}

export interface InvestmentConnectionSubscription
  extends Promise<AsyncIterator<InvestmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InvestmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInvestmentSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PropertyEdge {
  node: Property;
  cursor: String;
}

export interface PropertyEdgePromise
  extends Promise<PropertyEdge>,
    Fragmentable {
  node: <T = PropertyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PropertyEdgeSubscription
  extends Promise<AsyncIterator<PropertyEdge>>,
    Fragmentable {
  node: <T = PropertySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface InvestmentSubscriptionPayload {
  mutation: MutationType;
  node: Investment;
  updatedFields: String[];
  previousValues: InvestmentPreviousValues;
}

export interface InvestmentSubscriptionPayloadPromise
  extends Promise<InvestmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InvestmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InvestmentPreviousValuesPromise>() => T;
}

export interface InvestmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InvestmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InvestmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InvestmentPreviousValuesSubscription>() => T;
}

export interface Investment {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  advantages?: String;
  condominiumFees?: Float;
  csgTax?: Float;
  description?: String;
  disadvantages?: String;
  homeownerInsurance?: Float;
  loanAmount?: Float;
  loanInsuranceRate?: Float;
  loanLender?: String;
  loanMensualRepaymentAmount?: Float;
  loanMonthsOfdeferredReimbursement?: Int;
  loanRate?: Float;
  monthlyGain?: Float;
  name?: String;
  notaryFees?: Float;
  numberOfMonths?: Int;
  paybackperiod?: Int;
  personalContribution?: Float;
  personnalContribution?: Float;
  propertyTax?: Float;
  realEstatePrice?: Float;
  renovationsPrice?: Float;
  taxes?: Float;
}

export interface InvestmentPromise extends Promise<Investment>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  property: <T = PropertyPromise>() => T;
  advantages: () => Promise<String>;
  condominiumFees: () => Promise<Float>;
  csgTax: () => Promise<Float>;
  description: () => Promise<String>;
  disadvantages: () => Promise<String>;
  homeownerInsurance: () => Promise<Float>;
  loanAmount: () => Promise<Float>;
  loanInsuranceRate: () => Promise<Float>;
  loanLender: () => Promise<String>;
  loanMensualRepaymentAmount: () => Promise<Float>;
  loanMonthsOfdeferredReimbursement: () => Promise<Int>;
  loanRate: () => Promise<Float>;
  monthlyGain: () => Promise<Float>;
  name: () => Promise<String>;
  notaryFees: () => Promise<Float>;
  numberOfMonths: () => Promise<Int>;
  paybackperiod: () => Promise<Int>;
  personalContribution: () => Promise<Float>;
  personnalContribution: () => Promise<Float>;
  propertyTax: () => Promise<Float>;
  realEstatePrice: () => Promise<Float>;
  renovationsPrice: () => Promise<Float>;
  taxes: () => Promise<Float>;
}

export interface InvestmentSubscription
  extends Promise<AsyncIterator<Investment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  property: <T = PropertySubscription>() => T;
  advantages: () => Promise<AsyncIterator<String>>;
  condominiumFees: () => Promise<AsyncIterator<Float>>;
  csgTax: () => Promise<AsyncIterator<Float>>;
  description: () => Promise<AsyncIterator<String>>;
  disadvantages: () => Promise<AsyncIterator<String>>;
  homeownerInsurance: () => Promise<AsyncIterator<Float>>;
  loanAmount: () => Promise<AsyncIterator<Float>>;
  loanInsuranceRate: () => Promise<AsyncIterator<Float>>;
  loanLender: () => Promise<AsyncIterator<String>>;
  loanMensualRepaymentAmount: () => Promise<AsyncIterator<Float>>;
  loanMonthsOfdeferredReimbursement: () => Promise<AsyncIterator<Int>>;
  loanRate: () => Promise<AsyncIterator<Float>>;
  monthlyGain: () => Promise<AsyncIterator<Float>>;
  name: () => Promise<AsyncIterator<String>>;
  notaryFees: () => Promise<AsyncIterator<Float>>;
  numberOfMonths: () => Promise<AsyncIterator<Int>>;
  paybackperiod: () => Promise<AsyncIterator<Int>>;
  personalContribution: () => Promise<AsyncIterator<Float>>;
  personnalContribution: () => Promise<AsyncIterator<Float>>;
  propertyTax: () => Promise<AsyncIterator<Float>>;
  realEstatePrice: () => Promise<AsyncIterator<Float>>;
  renovationsPrice: () => Promise<AsyncIterator<Float>>;
  taxes: () => Promise<AsyncIterator<Float>>;
}

export interface InvestmentNullablePromise
  extends Promise<Investment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  property: <T = PropertyPromise>() => T;
  advantages: () => Promise<String>;
  condominiumFees: () => Promise<Float>;
  csgTax: () => Promise<Float>;
  description: () => Promise<String>;
  disadvantages: () => Promise<String>;
  homeownerInsurance: () => Promise<Float>;
  loanAmount: () => Promise<Float>;
  loanInsuranceRate: () => Promise<Float>;
  loanLender: () => Promise<String>;
  loanMensualRepaymentAmount: () => Promise<Float>;
  loanMonthsOfdeferredReimbursement: () => Promise<Int>;
  loanRate: () => Promise<Float>;
  monthlyGain: () => Promise<Float>;
  name: () => Promise<String>;
  notaryFees: () => Promise<Float>;
  numberOfMonths: () => Promise<Int>;
  paybackperiod: () => Promise<Int>;
  personalContribution: () => Promise<Float>;
  personnalContribution: () => Promise<Float>;
  propertyTax: () => Promise<Float>;
  realEstatePrice: () => Promise<Float>;
  renovationsPrice: () => Promise<Float>;
  taxes: () => Promise<Float>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  properties: <T = FragmentableArray<Property>>(args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  properties: <T = Promise<AsyncIterator<PropertySubscription>>>(args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  properties: <T = FragmentableArray<Property>>(args?: {
    where?: PropertyWhereInput;
    orderBy?: PropertyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Property {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  address?: String;
  advantages?: String;
  area?: String;
  bathroomsCount?: Int;
  bedroomsCount?: Int;
  city?: String;
  disadvantages?: String;
  floor?: Int;
  parking?: Int;
  surface?: Float;
  zipCode?: String;
}

export interface PropertyPromise extends Promise<Property>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  author: <T = UserPromise>() => T;
  name: () => Promise<String>;
  address: () => Promise<String>;
  advantages: () => Promise<String>;
  area: () => Promise<String>;
  bathroomsCount: () => Promise<Int>;
  bedroomsCount: () => Promise<Int>;
  city: () => Promise<String>;
  disadvantages: () => Promise<String>;
  floor: () => Promise<Int>;
  investments: <T = FragmentableArray<Investment>>(args?: {
    where?: InvestmentWhereInput;
    orderBy?: InvestmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  parking: () => Promise<Int>;
  surface: () => Promise<Float>;
  zipCode: () => Promise<String>;
}

export interface PropertySubscription
  extends Promise<AsyncIterator<Property>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  author: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  advantages: () => Promise<AsyncIterator<String>>;
  area: () => Promise<AsyncIterator<String>>;
  bathroomsCount: () => Promise<AsyncIterator<Int>>;
  bedroomsCount: () => Promise<AsyncIterator<Int>>;
  city: () => Promise<AsyncIterator<String>>;
  disadvantages: () => Promise<AsyncIterator<String>>;
  floor: () => Promise<AsyncIterator<Int>>;
  investments: <T = Promise<AsyncIterator<InvestmentSubscription>>>(args?: {
    where?: InvestmentWhereInput;
    orderBy?: InvestmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  parking: () => Promise<AsyncIterator<Int>>;
  surface: () => Promise<AsyncIterator<Float>>;
  zipCode: () => Promise<AsyncIterator<String>>;
}

export interface PropertyNullablePromise
  extends Promise<Property | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  author: <T = UserPromise>() => T;
  name: () => Promise<String>;
  address: () => Promise<String>;
  advantages: () => Promise<String>;
  area: () => Promise<String>;
  bathroomsCount: () => Promise<Int>;
  bedroomsCount: () => Promise<Int>;
  city: () => Promise<String>;
  disadvantages: () => Promise<String>;
  floor: () => Promise<Int>;
  investments: <T = FragmentableArray<Investment>>(args?: {
    where?: InvestmentWhereInput;
    orderBy?: InvestmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  parking: () => Promise<Int>;
  surface: () => Promise<Float>;
  zipCode: () => Promise<String>;
}

export interface PropertyConnection {
  pageInfo: PageInfo;
  edges: PropertyEdge[];
}

export interface PropertyConnectionPromise
  extends Promise<PropertyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PropertyEdge>>() => T;
  aggregate: <T = AggregatePropertyPromise>() => T;
}

export interface PropertyConnectionSubscription
  extends Promise<AsyncIterator<PropertyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PropertyEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePropertySubscription>() => T;
}

export interface AggregateProperty {
  count: Int;
}

export interface AggregatePropertyPromise
  extends Promise<AggregateProperty>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePropertySubscription
  extends Promise<AsyncIterator<AggregateProperty>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateInvestment {
  count: Int;
}

export interface AggregateInvestmentPromise
  extends Promise<AggregateInvestment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInvestmentSubscription
  extends Promise<AsyncIterator<AggregateInvestment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Property",
    embedded: false
  },
  {
    name: "Investment",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
