module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateInvestment {
  count: Int!
}

type AggregateProperty {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Investment {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  property: Property!
  advantages: String
  condominiumFees: Float
  csgTax: Float
  description: String
  disadvantages: String
  homeownerInsurance: Float
  loanAmount: Float
  loanInsuranceRate: Float
  loanLender: String
  loanMensualRepaymentAmount: Float
  loanMonthsOfdeferredReimbursement: Int
  loanRate: Float
  monthlyGain: Float
  name: String
  notaryFees: Float
  numberOfMonths: Int
  paybackperiod: Int
  personalContribution: Float
  personnalContribution: Float
  propertyTax: Float
  realEstatePrice: Float
  renovationsPrice: Float
  taxes: Float
}

type InvestmentConnection {
  pageInfo: PageInfo!
  edges: [InvestmentEdge]!
  aggregate: AggregateInvestment!
}

input InvestmentCreateInput {
  id: ID
  property: PropertyCreateOneWithoutInvestmentsInput!
  advantages: String
  condominiumFees: Float
  csgTax: Float
  description: String
  disadvantages: String
  homeownerInsurance: Float
  loanAmount: Float
  loanInsuranceRate: Float
  loanLender: String
  loanMensualRepaymentAmount: Float
  loanMonthsOfdeferredReimbursement: Int
  loanRate: Float
  monthlyGain: Float
  name: String
  notaryFees: Float
  numberOfMonths: Int
  paybackperiod: Int
  personalContribution: Float
  personnalContribution: Float
  propertyTax: Float
  realEstatePrice: Float
  renovationsPrice: Float
  taxes: Float
}

input InvestmentCreateManyWithoutPropertyInput {
  create: [InvestmentCreateWithoutPropertyInput!]
  connect: [InvestmentWhereUniqueInput!]
}

input InvestmentCreateWithoutPropertyInput {
  id: ID
  advantages: String
  condominiumFees: Float
  csgTax: Float
  description: String
  disadvantages: String
  homeownerInsurance: Float
  loanAmount: Float
  loanInsuranceRate: Float
  loanLender: String
  loanMensualRepaymentAmount: Float
  loanMonthsOfdeferredReimbursement: Int
  loanRate: Float
  monthlyGain: Float
  name: String
  notaryFees: Float
  numberOfMonths: Int
  paybackperiod: Int
  personalContribution: Float
  personnalContribution: Float
  propertyTax: Float
  realEstatePrice: Float
  renovationsPrice: Float
  taxes: Float
}

type InvestmentEdge {
  node: Investment!
  cursor: String!
}

enum InvestmentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  advantages_ASC
  advantages_DESC
  condominiumFees_ASC
  condominiumFees_DESC
  csgTax_ASC
  csgTax_DESC
  description_ASC
  description_DESC
  disadvantages_ASC
  disadvantages_DESC
  homeownerInsurance_ASC
  homeownerInsurance_DESC
  loanAmount_ASC
  loanAmount_DESC
  loanInsuranceRate_ASC
  loanInsuranceRate_DESC
  loanLender_ASC
  loanLender_DESC
  loanMensualRepaymentAmount_ASC
  loanMensualRepaymentAmount_DESC
  loanMonthsOfdeferredReimbursement_ASC
  loanMonthsOfdeferredReimbursement_DESC
  loanRate_ASC
  loanRate_DESC
  monthlyGain_ASC
  monthlyGain_DESC
  name_ASC
  name_DESC
  notaryFees_ASC
  notaryFees_DESC
  numberOfMonths_ASC
  numberOfMonths_DESC
  paybackperiod_ASC
  paybackperiod_DESC
  personalContribution_ASC
  personalContribution_DESC
  personnalContribution_ASC
  personnalContribution_DESC
  propertyTax_ASC
  propertyTax_DESC
  realEstatePrice_ASC
  realEstatePrice_DESC
  renovationsPrice_ASC
  renovationsPrice_DESC
  taxes_ASC
  taxes_DESC
}

type InvestmentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  advantages: String
  condominiumFees: Float
  csgTax: Float
  description: String
  disadvantages: String
  homeownerInsurance: Float
  loanAmount: Float
  loanInsuranceRate: Float
  loanLender: String
  loanMensualRepaymentAmount: Float
  loanMonthsOfdeferredReimbursement: Int
  loanRate: Float
  monthlyGain: Float
  name: String
  notaryFees: Float
  numberOfMonths: Int
  paybackperiod: Int
  personalContribution: Float
  personnalContribution: Float
  propertyTax: Float
  realEstatePrice: Float
  renovationsPrice: Float
  taxes: Float
}

input InvestmentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  advantages: String
  advantages_not: String
  advantages_in: [String!]
  advantages_not_in: [String!]
  advantages_lt: String
  advantages_lte: String
  advantages_gt: String
  advantages_gte: String
  advantages_contains: String
  advantages_not_contains: String
  advantages_starts_with: String
  advantages_not_starts_with: String
  advantages_ends_with: String
  advantages_not_ends_with: String
  condominiumFees: Float
  condominiumFees_not: Float
  condominiumFees_in: [Float!]
  condominiumFees_not_in: [Float!]
  condominiumFees_lt: Float
  condominiumFees_lte: Float
  condominiumFees_gt: Float
  condominiumFees_gte: Float
  csgTax: Float
  csgTax_not: Float
  csgTax_in: [Float!]
  csgTax_not_in: [Float!]
  csgTax_lt: Float
  csgTax_lte: Float
  csgTax_gt: Float
  csgTax_gte: Float
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  disadvantages: String
  disadvantages_not: String
  disadvantages_in: [String!]
  disadvantages_not_in: [String!]
  disadvantages_lt: String
  disadvantages_lte: String
  disadvantages_gt: String
  disadvantages_gte: String
  disadvantages_contains: String
  disadvantages_not_contains: String
  disadvantages_starts_with: String
  disadvantages_not_starts_with: String
  disadvantages_ends_with: String
  disadvantages_not_ends_with: String
  homeownerInsurance: Float
  homeownerInsurance_not: Float
  homeownerInsurance_in: [Float!]
  homeownerInsurance_not_in: [Float!]
  homeownerInsurance_lt: Float
  homeownerInsurance_lte: Float
  homeownerInsurance_gt: Float
  homeownerInsurance_gte: Float
  loanAmount: Float
  loanAmount_not: Float
  loanAmount_in: [Float!]
  loanAmount_not_in: [Float!]
  loanAmount_lt: Float
  loanAmount_lte: Float
  loanAmount_gt: Float
  loanAmount_gte: Float
  loanInsuranceRate: Float
  loanInsuranceRate_not: Float
  loanInsuranceRate_in: [Float!]
  loanInsuranceRate_not_in: [Float!]
  loanInsuranceRate_lt: Float
  loanInsuranceRate_lte: Float
  loanInsuranceRate_gt: Float
  loanInsuranceRate_gte: Float
  loanLender: String
  loanLender_not: String
  loanLender_in: [String!]
  loanLender_not_in: [String!]
  loanLender_lt: String
  loanLender_lte: String
  loanLender_gt: String
  loanLender_gte: String
  loanLender_contains: String
  loanLender_not_contains: String
  loanLender_starts_with: String
  loanLender_not_starts_with: String
  loanLender_ends_with: String
  loanLender_not_ends_with: String
  loanMensualRepaymentAmount: Float
  loanMensualRepaymentAmount_not: Float
  loanMensualRepaymentAmount_in: [Float!]
  loanMensualRepaymentAmount_not_in: [Float!]
  loanMensualRepaymentAmount_lt: Float
  loanMensualRepaymentAmount_lte: Float
  loanMensualRepaymentAmount_gt: Float
  loanMensualRepaymentAmount_gte: Float
  loanMonthsOfdeferredReimbursement: Int
  loanMonthsOfdeferredReimbursement_not: Int
  loanMonthsOfdeferredReimbursement_in: [Int!]
  loanMonthsOfdeferredReimbursement_not_in: [Int!]
  loanMonthsOfdeferredReimbursement_lt: Int
  loanMonthsOfdeferredReimbursement_lte: Int
  loanMonthsOfdeferredReimbursement_gt: Int
  loanMonthsOfdeferredReimbursement_gte: Int
  loanRate: Float
  loanRate_not: Float
  loanRate_in: [Float!]
  loanRate_not_in: [Float!]
  loanRate_lt: Float
  loanRate_lte: Float
  loanRate_gt: Float
  loanRate_gte: Float
  monthlyGain: Float
  monthlyGain_not: Float
  monthlyGain_in: [Float!]
  monthlyGain_not_in: [Float!]
  monthlyGain_lt: Float
  monthlyGain_lte: Float
  monthlyGain_gt: Float
  monthlyGain_gte: Float
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  notaryFees: Float
  notaryFees_not: Float
  notaryFees_in: [Float!]
  notaryFees_not_in: [Float!]
  notaryFees_lt: Float
  notaryFees_lte: Float
  notaryFees_gt: Float
  notaryFees_gte: Float
  numberOfMonths: Int
  numberOfMonths_not: Int
  numberOfMonths_in: [Int!]
  numberOfMonths_not_in: [Int!]
  numberOfMonths_lt: Int
  numberOfMonths_lte: Int
  numberOfMonths_gt: Int
  numberOfMonths_gte: Int
  paybackperiod: Int
  paybackperiod_not: Int
  paybackperiod_in: [Int!]
  paybackperiod_not_in: [Int!]
  paybackperiod_lt: Int
  paybackperiod_lte: Int
  paybackperiod_gt: Int
  paybackperiod_gte: Int
  personalContribution: Float
  personalContribution_not: Float
  personalContribution_in: [Float!]
  personalContribution_not_in: [Float!]
  personalContribution_lt: Float
  personalContribution_lte: Float
  personalContribution_gt: Float
  personalContribution_gte: Float
  personnalContribution: Float
  personnalContribution_not: Float
  personnalContribution_in: [Float!]
  personnalContribution_not_in: [Float!]
  personnalContribution_lt: Float
  personnalContribution_lte: Float
  personnalContribution_gt: Float
  personnalContribution_gte: Float
  propertyTax: Float
  propertyTax_not: Float
  propertyTax_in: [Float!]
  propertyTax_not_in: [Float!]
  propertyTax_lt: Float
  propertyTax_lte: Float
  propertyTax_gt: Float
  propertyTax_gte: Float
  realEstatePrice: Float
  realEstatePrice_not: Float
  realEstatePrice_in: [Float!]
  realEstatePrice_not_in: [Float!]
  realEstatePrice_lt: Float
  realEstatePrice_lte: Float
  realEstatePrice_gt: Float
  realEstatePrice_gte: Float
  renovationsPrice: Float
  renovationsPrice_not: Float
  renovationsPrice_in: [Float!]
  renovationsPrice_not_in: [Float!]
  renovationsPrice_lt: Float
  renovationsPrice_lte: Float
  renovationsPrice_gt: Float
  renovationsPrice_gte: Float
  taxes: Float
  taxes_not: Float
  taxes_in: [Float!]
  taxes_not_in: [Float!]
  taxes_lt: Float
  taxes_lte: Float
  taxes_gt: Float
  taxes_gte: Float
  AND: [InvestmentScalarWhereInput!]
  OR: [InvestmentScalarWhereInput!]
  NOT: [InvestmentScalarWhereInput!]
}

type InvestmentSubscriptionPayload {
  mutation: MutationType!
  node: Investment
  updatedFields: [String!]
  previousValues: InvestmentPreviousValues
}

input InvestmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InvestmentWhereInput
  AND: [InvestmentSubscriptionWhereInput!]
  OR: [InvestmentSubscriptionWhereInput!]
  NOT: [InvestmentSubscriptionWhereInput!]
}

input InvestmentUpdateInput {
  property: PropertyUpdateOneRequiredWithoutInvestmentsInput
  advantages: String
  condominiumFees: Float
  csgTax: Float
  description: String
  disadvantages: String
  homeownerInsurance: Float
  loanAmount: Float
  loanInsuranceRate: Float
  loanLender: String
  loanMensualRepaymentAmount: Float
  loanMonthsOfdeferredReimbursement: Int
  loanRate: Float
  monthlyGain: Float
  name: String
  notaryFees: Float
  numberOfMonths: Int
  paybackperiod: Int
  personalContribution: Float
  personnalContribution: Float
  propertyTax: Float
  realEstatePrice: Float
  renovationsPrice: Float
  taxes: Float
}

input InvestmentUpdateManyDataInput {
  advantages: String
  condominiumFees: Float
  csgTax: Float
  description: String
  disadvantages: String
  homeownerInsurance: Float
  loanAmount: Float
  loanInsuranceRate: Float
  loanLender: String
  loanMensualRepaymentAmount: Float
  loanMonthsOfdeferredReimbursement: Int
  loanRate: Float
  monthlyGain: Float
  name: String
  notaryFees: Float
  numberOfMonths: Int
  paybackperiod: Int
  personalContribution: Float
  personnalContribution: Float
  propertyTax: Float
  realEstatePrice: Float
  renovationsPrice: Float
  taxes: Float
}

input InvestmentUpdateManyMutationInput {
  advantages: String
  condominiumFees: Float
  csgTax: Float
  description: String
  disadvantages: String
  homeownerInsurance: Float
  loanAmount: Float
  loanInsuranceRate: Float
  loanLender: String
  loanMensualRepaymentAmount: Float
  loanMonthsOfdeferredReimbursement: Int
  loanRate: Float
  monthlyGain: Float
  name: String
  notaryFees: Float
  numberOfMonths: Int
  paybackperiod: Int
  personalContribution: Float
  personnalContribution: Float
  propertyTax: Float
  realEstatePrice: Float
  renovationsPrice: Float
  taxes: Float
}

input InvestmentUpdateManyWithoutPropertyInput {
  create: [InvestmentCreateWithoutPropertyInput!]
  delete: [InvestmentWhereUniqueInput!]
  connect: [InvestmentWhereUniqueInput!]
  set: [InvestmentWhereUniqueInput!]
  disconnect: [InvestmentWhereUniqueInput!]
  update: [InvestmentUpdateWithWhereUniqueWithoutPropertyInput!]
  upsert: [InvestmentUpsertWithWhereUniqueWithoutPropertyInput!]
  deleteMany: [InvestmentScalarWhereInput!]
  updateMany: [InvestmentUpdateManyWithWhereNestedInput!]
}

input InvestmentUpdateManyWithWhereNestedInput {
  where: InvestmentScalarWhereInput!
  data: InvestmentUpdateManyDataInput!
}

input InvestmentUpdateWithoutPropertyDataInput {
  advantages: String
  condominiumFees: Float
  csgTax: Float
  description: String
  disadvantages: String
  homeownerInsurance: Float
  loanAmount: Float
  loanInsuranceRate: Float
  loanLender: String
  loanMensualRepaymentAmount: Float
  loanMonthsOfdeferredReimbursement: Int
  loanRate: Float
  monthlyGain: Float
  name: String
  notaryFees: Float
  numberOfMonths: Int
  paybackperiod: Int
  personalContribution: Float
  personnalContribution: Float
  propertyTax: Float
  realEstatePrice: Float
  renovationsPrice: Float
  taxes: Float
}

input InvestmentUpdateWithWhereUniqueWithoutPropertyInput {
  where: InvestmentWhereUniqueInput!
  data: InvestmentUpdateWithoutPropertyDataInput!
}

input InvestmentUpsertWithWhereUniqueWithoutPropertyInput {
  where: InvestmentWhereUniqueInput!
  update: InvestmentUpdateWithoutPropertyDataInput!
  create: InvestmentCreateWithoutPropertyInput!
}

input InvestmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  property: PropertyWhereInput
  advantages: String
  advantages_not: String
  advantages_in: [String!]
  advantages_not_in: [String!]
  advantages_lt: String
  advantages_lte: String
  advantages_gt: String
  advantages_gte: String
  advantages_contains: String
  advantages_not_contains: String
  advantages_starts_with: String
  advantages_not_starts_with: String
  advantages_ends_with: String
  advantages_not_ends_with: String
  condominiumFees: Float
  condominiumFees_not: Float
  condominiumFees_in: [Float!]
  condominiumFees_not_in: [Float!]
  condominiumFees_lt: Float
  condominiumFees_lte: Float
  condominiumFees_gt: Float
  condominiumFees_gte: Float
  csgTax: Float
  csgTax_not: Float
  csgTax_in: [Float!]
  csgTax_not_in: [Float!]
  csgTax_lt: Float
  csgTax_lte: Float
  csgTax_gt: Float
  csgTax_gte: Float
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  disadvantages: String
  disadvantages_not: String
  disadvantages_in: [String!]
  disadvantages_not_in: [String!]
  disadvantages_lt: String
  disadvantages_lte: String
  disadvantages_gt: String
  disadvantages_gte: String
  disadvantages_contains: String
  disadvantages_not_contains: String
  disadvantages_starts_with: String
  disadvantages_not_starts_with: String
  disadvantages_ends_with: String
  disadvantages_not_ends_with: String
  homeownerInsurance: Float
  homeownerInsurance_not: Float
  homeownerInsurance_in: [Float!]
  homeownerInsurance_not_in: [Float!]
  homeownerInsurance_lt: Float
  homeownerInsurance_lte: Float
  homeownerInsurance_gt: Float
  homeownerInsurance_gte: Float
  loanAmount: Float
  loanAmount_not: Float
  loanAmount_in: [Float!]
  loanAmount_not_in: [Float!]
  loanAmount_lt: Float
  loanAmount_lte: Float
  loanAmount_gt: Float
  loanAmount_gte: Float
  loanInsuranceRate: Float
  loanInsuranceRate_not: Float
  loanInsuranceRate_in: [Float!]
  loanInsuranceRate_not_in: [Float!]
  loanInsuranceRate_lt: Float
  loanInsuranceRate_lte: Float
  loanInsuranceRate_gt: Float
  loanInsuranceRate_gte: Float
  loanLender: String
  loanLender_not: String
  loanLender_in: [String!]
  loanLender_not_in: [String!]
  loanLender_lt: String
  loanLender_lte: String
  loanLender_gt: String
  loanLender_gte: String
  loanLender_contains: String
  loanLender_not_contains: String
  loanLender_starts_with: String
  loanLender_not_starts_with: String
  loanLender_ends_with: String
  loanLender_not_ends_with: String
  loanMensualRepaymentAmount: Float
  loanMensualRepaymentAmount_not: Float
  loanMensualRepaymentAmount_in: [Float!]
  loanMensualRepaymentAmount_not_in: [Float!]
  loanMensualRepaymentAmount_lt: Float
  loanMensualRepaymentAmount_lte: Float
  loanMensualRepaymentAmount_gt: Float
  loanMensualRepaymentAmount_gte: Float
  loanMonthsOfdeferredReimbursement: Int
  loanMonthsOfdeferredReimbursement_not: Int
  loanMonthsOfdeferredReimbursement_in: [Int!]
  loanMonthsOfdeferredReimbursement_not_in: [Int!]
  loanMonthsOfdeferredReimbursement_lt: Int
  loanMonthsOfdeferredReimbursement_lte: Int
  loanMonthsOfdeferredReimbursement_gt: Int
  loanMonthsOfdeferredReimbursement_gte: Int
  loanRate: Float
  loanRate_not: Float
  loanRate_in: [Float!]
  loanRate_not_in: [Float!]
  loanRate_lt: Float
  loanRate_lte: Float
  loanRate_gt: Float
  loanRate_gte: Float
  monthlyGain: Float
  monthlyGain_not: Float
  monthlyGain_in: [Float!]
  monthlyGain_not_in: [Float!]
  monthlyGain_lt: Float
  monthlyGain_lte: Float
  monthlyGain_gt: Float
  monthlyGain_gte: Float
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  notaryFees: Float
  notaryFees_not: Float
  notaryFees_in: [Float!]
  notaryFees_not_in: [Float!]
  notaryFees_lt: Float
  notaryFees_lte: Float
  notaryFees_gt: Float
  notaryFees_gte: Float
  numberOfMonths: Int
  numberOfMonths_not: Int
  numberOfMonths_in: [Int!]
  numberOfMonths_not_in: [Int!]
  numberOfMonths_lt: Int
  numberOfMonths_lte: Int
  numberOfMonths_gt: Int
  numberOfMonths_gte: Int
  paybackperiod: Int
  paybackperiod_not: Int
  paybackperiod_in: [Int!]
  paybackperiod_not_in: [Int!]
  paybackperiod_lt: Int
  paybackperiod_lte: Int
  paybackperiod_gt: Int
  paybackperiod_gte: Int
  personalContribution: Float
  personalContribution_not: Float
  personalContribution_in: [Float!]
  personalContribution_not_in: [Float!]
  personalContribution_lt: Float
  personalContribution_lte: Float
  personalContribution_gt: Float
  personalContribution_gte: Float
  personnalContribution: Float
  personnalContribution_not: Float
  personnalContribution_in: [Float!]
  personnalContribution_not_in: [Float!]
  personnalContribution_lt: Float
  personnalContribution_lte: Float
  personnalContribution_gt: Float
  personnalContribution_gte: Float
  propertyTax: Float
  propertyTax_not: Float
  propertyTax_in: [Float!]
  propertyTax_not_in: [Float!]
  propertyTax_lt: Float
  propertyTax_lte: Float
  propertyTax_gt: Float
  propertyTax_gte: Float
  realEstatePrice: Float
  realEstatePrice_not: Float
  realEstatePrice_in: [Float!]
  realEstatePrice_not_in: [Float!]
  realEstatePrice_lt: Float
  realEstatePrice_lte: Float
  realEstatePrice_gt: Float
  realEstatePrice_gte: Float
  renovationsPrice: Float
  renovationsPrice_not: Float
  renovationsPrice_in: [Float!]
  renovationsPrice_not_in: [Float!]
  renovationsPrice_lt: Float
  renovationsPrice_lte: Float
  renovationsPrice_gt: Float
  renovationsPrice_gte: Float
  taxes: Float
  taxes_not: Float
  taxes_in: [Float!]
  taxes_not_in: [Float!]
  taxes_lt: Float
  taxes_lte: Float
  taxes_gt: Float
  taxes_gte: Float
  AND: [InvestmentWhereInput!]
  OR: [InvestmentWhereInput!]
  NOT: [InvestmentWhereInput!]
}

input InvestmentWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createInvestment(data: InvestmentCreateInput!): Investment!
  updateInvestment(data: InvestmentUpdateInput!, where: InvestmentWhereUniqueInput!): Investment
  updateManyInvestments(data: InvestmentUpdateManyMutationInput!, where: InvestmentWhereInput): BatchPayload!
  upsertInvestment(where: InvestmentWhereUniqueInput!, create: InvestmentCreateInput!, update: InvestmentUpdateInput!): Investment!
  deleteInvestment(where: InvestmentWhereUniqueInput!): Investment
  deleteManyInvestments(where: InvestmentWhereInput): BatchPayload!
  createProperty(data: PropertyCreateInput!): Property!
  updateProperty(data: PropertyUpdateInput!, where: PropertyWhereUniqueInput!): Property
  updateManyProperties(data: PropertyUpdateManyMutationInput!, where: PropertyWhereInput): BatchPayload!
  upsertProperty(where: PropertyWhereUniqueInput!, create: PropertyCreateInput!, update: PropertyUpdateInput!): Property!
  deleteProperty(where: PropertyWhereUniqueInput!): Property
  deleteManyProperties(where: PropertyWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Property {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  name: String!
  address: String
  advantages: String
  area: String
  bathroomsCount: Int
  bedroomsCount: Int
  city: String
  disadvantages: String
  floor: Int
  investments(where: InvestmentWhereInput, orderBy: InvestmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Investment!]
  parking: Int
  surface: Float
  zipCode: String
}

type PropertyConnection {
  pageInfo: PageInfo!
  edges: [PropertyEdge]!
  aggregate: AggregateProperty!
}

input PropertyCreateInput {
  id: ID
  author: UserCreateOneWithoutPropertiesInput!
  name: String!
  address: String
  advantages: String
  area: String
  bathroomsCount: Int
  bedroomsCount: Int
  city: String
  disadvantages: String
  floor: Int
  investments: InvestmentCreateManyWithoutPropertyInput
  parking: Int
  surface: Float
  zipCode: String
}

input PropertyCreateManyWithoutAuthorInput {
  create: [PropertyCreateWithoutAuthorInput!]
  connect: [PropertyWhereUniqueInput!]
}

input PropertyCreateOneWithoutInvestmentsInput {
  create: PropertyCreateWithoutInvestmentsInput
  connect: PropertyWhereUniqueInput
}

input PropertyCreateWithoutAuthorInput {
  id: ID
  name: String!
  address: String
  advantages: String
  area: String
  bathroomsCount: Int
  bedroomsCount: Int
  city: String
  disadvantages: String
  floor: Int
  investments: InvestmentCreateManyWithoutPropertyInput
  parking: Int
  surface: Float
  zipCode: String
}

input PropertyCreateWithoutInvestmentsInput {
  id: ID
  author: UserCreateOneWithoutPropertiesInput!
  name: String!
  address: String
  advantages: String
  area: String
  bathroomsCount: Int
  bedroomsCount: Int
  city: String
  disadvantages: String
  floor: Int
  parking: Int
  surface: Float
  zipCode: String
}

type PropertyEdge {
  node: Property!
  cursor: String!
}

enum PropertyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  advantages_ASC
  advantages_DESC
  area_ASC
  area_DESC
  bathroomsCount_ASC
  bathroomsCount_DESC
  bedroomsCount_ASC
  bedroomsCount_DESC
  city_ASC
  city_DESC
  disadvantages_ASC
  disadvantages_DESC
  floor_ASC
  floor_DESC
  parking_ASC
  parking_DESC
  surface_ASC
  surface_DESC
  zipCode_ASC
  zipCode_DESC
}

type PropertyPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  address: String
  advantages: String
  area: String
  bathroomsCount: Int
  bedroomsCount: Int
  city: String
  disadvantages: String
  floor: Int
  parking: Int
  surface: Float
  zipCode: String
}

input PropertyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  advantages: String
  advantages_not: String
  advantages_in: [String!]
  advantages_not_in: [String!]
  advantages_lt: String
  advantages_lte: String
  advantages_gt: String
  advantages_gte: String
  advantages_contains: String
  advantages_not_contains: String
  advantages_starts_with: String
  advantages_not_starts_with: String
  advantages_ends_with: String
  advantages_not_ends_with: String
  area: String
  area_not: String
  area_in: [String!]
  area_not_in: [String!]
  area_lt: String
  area_lte: String
  area_gt: String
  area_gte: String
  area_contains: String
  area_not_contains: String
  area_starts_with: String
  area_not_starts_with: String
  area_ends_with: String
  area_not_ends_with: String
  bathroomsCount: Int
  bathroomsCount_not: Int
  bathroomsCount_in: [Int!]
  bathroomsCount_not_in: [Int!]
  bathroomsCount_lt: Int
  bathroomsCount_lte: Int
  bathroomsCount_gt: Int
  bathroomsCount_gte: Int
  bedroomsCount: Int
  bedroomsCount_not: Int
  bedroomsCount_in: [Int!]
  bedroomsCount_not_in: [Int!]
  bedroomsCount_lt: Int
  bedroomsCount_lte: Int
  bedroomsCount_gt: Int
  bedroomsCount_gte: Int
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  disadvantages: String
  disadvantages_not: String
  disadvantages_in: [String!]
  disadvantages_not_in: [String!]
  disadvantages_lt: String
  disadvantages_lte: String
  disadvantages_gt: String
  disadvantages_gte: String
  disadvantages_contains: String
  disadvantages_not_contains: String
  disadvantages_starts_with: String
  disadvantages_not_starts_with: String
  disadvantages_ends_with: String
  disadvantages_not_ends_with: String
  floor: Int
  floor_not: Int
  floor_in: [Int!]
  floor_not_in: [Int!]
  floor_lt: Int
  floor_lte: Int
  floor_gt: Int
  floor_gte: Int
  parking: Int
  parking_not: Int
  parking_in: [Int!]
  parking_not_in: [Int!]
  parking_lt: Int
  parking_lte: Int
  parking_gt: Int
  parking_gte: Int
  surface: Float
  surface_not: Float
  surface_in: [Float!]
  surface_not_in: [Float!]
  surface_lt: Float
  surface_lte: Float
  surface_gt: Float
  surface_gte: Float
  zipCode: String
  zipCode_not: String
  zipCode_in: [String!]
  zipCode_not_in: [String!]
  zipCode_lt: String
  zipCode_lte: String
  zipCode_gt: String
  zipCode_gte: String
  zipCode_contains: String
  zipCode_not_contains: String
  zipCode_starts_with: String
  zipCode_not_starts_with: String
  zipCode_ends_with: String
  zipCode_not_ends_with: String
  AND: [PropertyScalarWhereInput!]
  OR: [PropertyScalarWhereInput!]
  NOT: [PropertyScalarWhereInput!]
}

type PropertySubscriptionPayload {
  mutation: MutationType!
  node: Property
  updatedFields: [String!]
  previousValues: PropertyPreviousValues
}

input PropertySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PropertyWhereInput
  AND: [PropertySubscriptionWhereInput!]
  OR: [PropertySubscriptionWhereInput!]
  NOT: [PropertySubscriptionWhereInput!]
}

input PropertyUpdateInput {
  author: UserUpdateOneRequiredWithoutPropertiesInput
  name: String
  address: String
  advantages: String
  area: String
  bathroomsCount: Int
  bedroomsCount: Int
  city: String
  disadvantages: String
  floor: Int
  investments: InvestmentUpdateManyWithoutPropertyInput
  parking: Int
  surface: Float
  zipCode: String
}

input PropertyUpdateManyDataInput {
  name: String
  address: String
  advantages: String
  area: String
  bathroomsCount: Int
  bedroomsCount: Int
  city: String
  disadvantages: String
  floor: Int
  parking: Int
  surface: Float
  zipCode: String
}

input PropertyUpdateManyMutationInput {
  name: String
  address: String
  advantages: String
  area: String
  bathroomsCount: Int
  bedroomsCount: Int
  city: String
  disadvantages: String
  floor: Int
  parking: Int
  surface: Float
  zipCode: String
}

input PropertyUpdateManyWithoutAuthorInput {
  create: [PropertyCreateWithoutAuthorInput!]
  delete: [PropertyWhereUniqueInput!]
  connect: [PropertyWhereUniqueInput!]
  set: [PropertyWhereUniqueInput!]
  disconnect: [PropertyWhereUniqueInput!]
  update: [PropertyUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PropertyUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PropertyScalarWhereInput!]
  updateMany: [PropertyUpdateManyWithWhereNestedInput!]
}

input PropertyUpdateManyWithWhereNestedInput {
  where: PropertyScalarWhereInput!
  data: PropertyUpdateManyDataInput!
}

input PropertyUpdateOneRequiredWithoutInvestmentsInput {
  create: PropertyCreateWithoutInvestmentsInput
  update: PropertyUpdateWithoutInvestmentsDataInput
  upsert: PropertyUpsertWithoutInvestmentsInput
  connect: PropertyWhereUniqueInput
}

input PropertyUpdateWithoutAuthorDataInput {
  name: String
  address: String
  advantages: String
  area: String
  bathroomsCount: Int
  bedroomsCount: Int
  city: String
  disadvantages: String
  floor: Int
  investments: InvestmentUpdateManyWithoutPropertyInput
  parking: Int
  surface: Float
  zipCode: String
}

input PropertyUpdateWithoutInvestmentsDataInput {
  author: UserUpdateOneRequiredWithoutPropertiesInput
  name: String
  address: String
  advantages: String
  area: String
  bathroomsCount: Int
  bedroomsCount: Int
  city: String
  disadvantages: String
  floor: Int
  parking: Int
  surface: Float
  zipCode: String
}

input PropertyUpdateWithWhereUniqueWithoutAuthorInput {
  where: PropertyWhereUniqueInput!
  data: PropertyUpdateWithoutAuthorDataInput!
}

input PropertyUpsertWithoutInvestmentsInput {
  update: PropertyUpdateWithoutInvestmentsDataInput!
  create: PropertyCreateWithoutInvestmentsInput!
}

input PropertyUpsertWithWhereUniqueWithoutAuthorInput {
  where: PropertyWhereUniqueInput!
  update: PropertyUpdateWithoutAuthorDataInput!
  create: PropertyCreateWithoutAuthorInput!
}

input PropertyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  author: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  advantages: String
  advantages_not: String
  advantages_in: [String!]
  advantages_not_in: [String!]
  advantages_lt: String
  advantages_lte: String
  advantages_gt: String
  advantages_gte: String
  advantages_contains: String
  advantages_not_contains: String
  advantages_starts_with: String
  advantages_not_starts_with: String
  advantages_ends_with: String
  advantages_not_ends_with: String
  area: String
  area_not: String
  area_in: [String!]
  area_not_in: [String!]
  area_lt: String
  area_lte: String
  area_gt: String
  area_gte: String
  area_contains: String
  area_not_contains: String
  area_starts_with: String
  area_not_starts_with: String
  area_ends_with: String
  area_not_ends_with: String
  bathroomsCount: Int
  bathroomsCount_not: Int
  bathroomsCount_in: [Int!]
  bathroomsCount_not_in: [Int!]
  bathroomsCount_lt: Int
  bathroomsCount_lte: Int
  bathroomsCount_gt: Int
  bathroomsCount_gte: Int
  bedroomsCount: Int
  bedroomsCount_not: Int
  bedroomsCount_in: [Int!]
  bedroomsCount_not_in: [Int!]
  bedroomsCount_lt: Int
  bedroomsCount_lte: Int
  bedroomsCount_gt: Int
  bedroomsCount_gte: Int
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  disadvantages: String
  disadvantages_not: String
  disadvantages_in: [String!]
  disadvantages_not_in: [String!]
  disadvantages_lt: String
  disadvantages_lte: String
  disadvantages_gt: String
  disadvantages_gte: String
  disadvantages_contains: String
  disadvantages_not_contains: String
  disadvantages_starts_with: String
  disadvantages_not_starts_with: String
  disadvantages_ends_with: String
  disadvantages_not_ends_with: String
  floor: Int
  floor_not: Int
  floor_in: [Int!]
  floor_not_in: [Int!]
  floor_lt: Int
  floor_lte: Int
  floor_gt: Int
  floor_gte: Int
  investments_every: InvestmentWhereInput
  investments_some: InvestmentWhereInput
  investments_none: InvestmentWhereInput
  parking: Int
  parking_not: Int
  parking_in: [Int!]
  parking_not_in: [Int!]
  parking_lt: Int
  parking_lte: Int
  parking_gt: Int
  parking_gte: Int
  surface: Float
  surface_not: Float
  surface_in: [Float!]
  surface_not_in: [Float!]
  surface_lt: Float
  surface_lte: Float
  surface_gt: Float
  surface_gte: Float
  zipCode: String
  zipCode_not: String
  zipCode_in: [String!]
  zipCode_not_in: [String!]
  zipCode_lt: String
  zipCode_lte: String
  zipCode_gt: String
  zipCode_gte: String
  zipCode_contains: String
  zipCode_not_contains: String
  zipCode_starts_with: String
  zipCode_not_starts_with: String
  zipCode_ends_with: String
  zipCode_not_ends_with: String
  AND: [PropertyWhereInput!]
  OR: [PropertyWhereInput!]
  NOT: [PropertyWhereInput!]
}

input PropertyWhereUniqueInput {
  id: ID
}

type Query {
  investment(where: InvestmentWhereUniqueInput!): Investment
  investments(where: InvestmentWhereInput, orderBy: InvestmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Investment]!
  investmentsConnection(where: InvestmentWhereInput, orderBy: InvestmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InvestmentConnection!
  property(where: PropertyWhereUniqueInput!): Property
  properties(where: PropertyWhereInput, orderBy: PropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Property]!
  propertiesConnection(where: PropertyWhereInput, orderBy: PropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PropertyConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  investment(where: InvestmentSubscriptionWhereInput): InvestmentSubscriptionPayload
  property(where: PropertySubscriptionWhereInput): PropertySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: String!
  password: String!
  properties(where: PropertyWhereInput, orderBy: PropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Property!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  properties: PropertyCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutPropertiesInput {
  create: UserCreateWithoutPropertiesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPropertiesInput {
  id: ID
  name: String!
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  properties: PropertyUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutPropertiesInput {
  create: UserCreateWithoutPropertiesInput
  update: UserUpdateWithoutPropertiesDataInput
  upsert: UserUpsertWithoutPropertiesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPropertiesDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutPropertiesInput {
  update: UserUpdateWithoutPropertiesDataInput!
  create: UserCreateWithoutPropertiesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  properties_every: PropertyWhereInput
  properties_some: PropertyWhereInput
  properties_none: PropertyWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    